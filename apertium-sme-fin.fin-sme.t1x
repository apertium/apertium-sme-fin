<?xml version="1.0" encoding="utf-8"?>
<transfer default="chunk">
  <section-def-cats>
    <def-cat n="conj">
      <cat-item tags="CC"/>
      <cat-item tags="CS"/>
      <cat-item tags="CC.*"/>
      <cat-item tags="CS.*"/>
    </def-cat>
    <def-cat n="adv">
      <cat-item tags="Adv"/>
      <cat-item tags="Adv.*"/>
    </def-cat>
    <def-cat n="pcle">
      <cat-item tags="Pcle"/>
      <cat-item tags="Pcle.*"/>
    </def-cat>
	<def-cat n="postpos">
		<cat-item tags="Po.*" />
	</def-cat>
	<def-cat n="prepos">
		<cat-item tags="Pr.*" />
	</def-cat>
	<def-cat n="adpos">
		<cat-item tags="Adp.*" />
	</def-cat>
	
    <def-cat n="neg_verb">
      <cat-item tags="V.Neg.*"/>
    </def-cat>
    <def-cat n="verb">
      <cat-item tags="V.*"/>
    </def-cat>
	<def-cat n="pcps">
		<cat-item tags="V.*.PrfPrc.*" />
		<cat-item tags="V.*.PrsPrc.*" />
	</def-cat>
    <def-cat n="inf">
      <cat-item tags="V.*.Inf1.*"/>
      <cat-item tags="V.*.Inf2.*"/>
      <cat-item tags="V.*.Inf3.*"/>
    </def-cat>
    <def-cat n="v_actor">
      <cat-item tags="V.Der_ja.*"/>
    </def-cat>
    <def-cat n="num_mod">
      <cat-item tags="N.*.*.@Num←"/>
    </def-cat>
    <def-cat n="nom_cmpnd">
      <cat-item tags="N.*.*.Cmpnd"/>
    </def-cat>
    <def-cat n="attrmod">
      <cat-item tags="Pron.Dem.*.*."/>
      <cat-item tags="Pron.Interr.*.*."/>
      <cat-item tags="Pron.Rel.*.*.@N→"/>
    </def-cat>
    <def-cat n="attrmod_1"> <!-- Svonni's grupp 1 --> 
      <cat-item tags="Pron.Dem.*.*."/> <!-- dat, dát, diet, dot, duot -->
      <cat-item tags="Pron.Indef.*.*."/> <!-- goappašat, guktot -->
      <!-- <cat-item tags="Pron.Interr.*.*."/> <!-- guhte, goabbá -->
      <cat-item tags="Pron.Rel.*.*.@N→"/> <!-- guhte, goabbá ?? maybe remove interr? -->
	  <cat-item lemma="buorre" tags="A.*"/>
      <cat-item lemma="bahá" tags="A.*"/>
      <cat-item lemma="okta" tags="Num.*"/>
    </def-cat>
    <def-cat n="attrmod_2"> <!-- Svonni's grupp 2 --> 
      <cat-item tags="Pron.Interr.*.*."/> <!-- mii gii only? -->
    </def-cat>
	<def-cat n="attrmod_3"> <!-- Svonni's grupp 3 -->
	  <cat-item tags="Num.*"/> <!-- how to do all numbers except for one? -->
	  <cat-item lemma="máŋga" tags="A.*"/>
      <cat-item lemma="galle" tags="A.*"/>
      <cat-item lemma="moadde" tags="Num.*"/>
	</def-cat>
	
	<def-cat n="adj_agr">
	</def-cat>
    <def-cat n="ord">
      <cat-item tags="Num.Ord.*"/>
    </def-cat>
    <def-cat n="num">
      <cat-item tags="Num.Card.*"/>
    </def-cat>
	<!-- 
	esimerkki:
	<def-cat n="pcle.qst">
	      <cat-item lemma="go" tags="Pcle.*"/>
    </def-cat>
	<def-cat n="month">
      <cat-item lemma="guovvamánnu" tags="N.*"/>
      <cat-item lemma="ođđajagimánnu" tags="N.*"/>
      <cat-item lemma="guovvamánnu" tags="N.*"/>
	</def-cat>
	-->
    <def-cat n="nom">
      <cat-item tags="N.*"/>
    </def-cat>
    <def-cat n="adj">
      <cat-item tags="A.*"/>
    </def-cat>
    <def-cat n="pronrefl">
      <cat-item tags="Pron.Refl.*"/>
    </def-cat>
    <def-cat n="pronindef">
      <cat-item tags="Pron.Indef.*"/>
    </def-cat>
    <def-cat n="pronpers">
      <cat-item tags="Pron.Pers.*"/>
    </def-cat>
    <def-cat n="punct_clb">
      <cat-item tags="Punct.CLB"/>
      <cat-item tags="Punct.CLB.*"/>
    </def-cat>
    <def-cat n="pron">
      <cat-item tags="Pron.*"/>
    </def-cat>
  </section-def-cats>
  <section-def-attrs>
    <def-attr n="gen">
      <attr-item tags="Fem"/>
      <attr-item tags="Masc"/>
    </def-attr>
    <def-attr n="a_verb">
      <attr-item tags="V"/>
      <attr-item tags="V.IV"/>
      <attr-item tags="V.TV"/>
      <attr-item tags="V.IV.Neg"/>
    </def-attr>
    <def-attr n="a_pron">
      <attr-item tags="Pron"/>
      <attr-item tags="Pron.Pers"/>
      <attr-item tags="Pron.Dem"/>
      <attr-item tags="Pron.Rel"/>
      <attr-item tags="Pron.Recipr"/>
      <attr-item tags="Pron.Refl"/>
      <attr-item tags="Pron.Interr"/>
      <attr-item tags="Pron.Qnt"/>
      <attr-item tags="Pron.Indef"/>
    </def-attr>
    <def-attr n="a_ord">
      <attr-item tags="Num.Ord"/>
      <attr-item tags="A.Ord"/>
    </def-attr>
    <def-attr n="a_num">
      <attr-item tags="Num"/>
    </def-attr>
    <def-attr n="a_adv">
      <attr-item tags="Adv"/>
    </def-attr>
    <def-attr n="a_adp">
	  <attr-item tags="Pr" />
	  <attr-item tags="Po" />
	  <attr-item tags="Adp" />
	</def-attr>
	<def-attr n="nbr">
	  <attr-item tags="Sg" />
	  <attr-item tags="Pl" />
	</def-attr>
    <def-attr n="a_pcle">
      <attr-item tags="Pcle"/>
    </def-attr>
    <def-attr n="a_conj">
      <attr-item tags="CC"/>
      <attr-item tags="CS"/>
    </def-attr>
    <def-attr n="a_adj">
      <attr-item tags="A"/>
      <attr-item tags="A.Attr"/>
      <attr-item tags="A.Agr"/>
    </def-attr>
    <def-attr n="a_nom">
      <attr-item tags="N"/>
      <attr-item tags="N.Actor"/>
      <attr-item tags="N.Prop"/>
      <attr-item tags="N.Prop.Plc"/>
      <attr-item tags="N.Prop.Mal"/>
    </def-attr>
    <def-attr n="a_attr">
      <attr-item tags="N"/>
      <attr-item tags="N.Actor"/>
      <attr-item tags="N.Prop"/>
      <attr-item tags="N.Prop.Plc"/>
      <attr-item tags="N.Prop.Mal"/>
      <attr-item tags="Pron.Dem"/>
      <attr-item tags="Pron.Interr"/>
    </def-attr>
    <def-attr n="a_case">
      <attr-item tags="Nom"/>
      <attr-item tags="Gen"/>
      <attr-item tags="Acc"/>
      <attr-item tags="Par"/>
      <attr-item tags="Abl"/>
      <attr-item tags="Ade"/>
      <attr-item tags="All"/>
      <attr-item tags="Ela"/>
      <attr-item tags="Ill"/>
      <attr-item tags="Ine"/>
      <attr-item tags="Ess"/>
      <attr-item tags="Tra"/>
      <attr-item tags="Abe"/>
      <attr-item tags="Com"/>
      <attr-item tags="Ins"/>
      <attr-item tags="Loc"/>
    </def-attr>
    <def-attr n="a_poss">
      <attr-item tags="Sg1"/>
      <attr-item tags="Sg2"/>
      <attr-item tags="Pl1"/>
      <attr-item tags="Pl2"/>
      <attr-item tags="Poss3"/>
      <!-- Hmm, is this inconsistency a problem? -->
    </def-attr>
    <def-attr n="a_der">
      <attr-item tags="Def_ja"/>
      <attr-item tags="Der2"/>
    </def-attr>
    <def-attr n="a_voice">
      <attr-item tags="Act"/>
      <attr-item tags="Pass"/>
    </def-attr>
    <def-attr n="a_trans">
      <attr-item tags="IV"/>
      <attr-item tags="TV"/>
    </def-attr>
    <def-attr n="a_realis">
      <attr-item tags="Ind"/>
      <attr-item tags="Imprt"/>
      <attr-item tags="Cond"/>
      <attr-item tags="Pot"/>
      <attr-item tags="Inf1"/>
      <attr-item tags="Inf2"/>
      <attr-item tags="Inf3"/>
      <attr-item tags="PrfPrc"/>
	  <attr-item tags="PrsPrc" />
      <attr-item tags="Inf"/>
    </def-attr>
    <def-attr n="a_neg">
      <attr-item tags="ConNeg"/>
    </def-attr>
    <def-attr n="a_qst">
      <attr-item tags="Qst"/>
      <attr-item tags="Qst_ko"/>
    </def-attr>
    <def-attr n="a_tense">
      <attr-item tags="Prs"/>
      <attr-item tags="Prt"/>
    </def-attr>
    <def-attr n="a_person">
      <attr-item tags="Sg1"/>
      <attr-item tags="Sg2"/>
      <attr-item tags="Sg3"/>
      <attr-item tags="Pl1"/>
      <attr-item tags="Pl2"/>
      <attr-item tags="Pl3"/>
      <attr-item tags="Pe4"/>
    </def-attr>
    <def-attr n="a_pxprs">
      <attr-item tags="PxSg1"/>
      <attr-item tags="PxSg2"/>
      <attr-item tags="PxSg3"/>
      <attr-item tags="PxPl1"/>
      <attr-item tags="PxPl2"/>
      <attr-item tags="PxPl3"/>
    </def-attr>
    <def-attr n="syntag">
      <attr-item tags="@X"/>
      <attr-item tags="@HNOUN"/>
      <attr-item tags="@CNP"/>
      <attr-item tags="@CVP"/>
      <attr-item tags="@→N"/>
      <attr-item tags="@←OBJ"/>
      <attr-item tags="@OBJ"/>
      <attr-item tags="@-F←OBJ"/>
      <attr-item tags="@SUBJ→"/>
      <attr-item tags="@←SUBJ"/>
      <attr-item tags="@SPRED→"/>
      <attr-item tags="@←SPRED"/>
      <attr-item tags="@\+FMAINV"/>
      <attr-item tags="@-FMAINV"/>
      <attr-item tags="@\+FAUXV"/>
      <attr-item tags="@ADVL"/>
      <attr-item tags="@←ADVL"/>
      <attr-item tags="@ADVL→"/>
      <attr-item tags="@HAB"/>
      <attr-item tags="@Num←"/>
      <attr-item tags="@→Num"/>
      <attr-item tags="@INTERJ"/>
      <attr-item tags="@PCLE"/>
      <attr-item tags="@OPRED→"/>
      <attr-item tags="@←OPRED"/>
      <attr-item tags="@→P"/>
      <attr-item tags="@P←"/>
      <attr-item tags="@-FSUBJ→"/>
      <attr-item tags="@-FOBJ→"/>
      <attr-item tags="@-F←OBJ"/>
    </def-attr>
  </section-def-attrs>
  <section-def-vars>
    <def-var n="number"/>
    <def-var n="case"/>
	<def-var n="com_num" />
    <def-var n="current_syntag"/>
    <def-var n="cur_verb_mood"/>
    <def-var n="cur_verb_tense"/>
  </section-def-vars>
  <section-def-macros>
	<def-macro n="set_com_number" npar="1" c="When noun case is comitative, add 'Sg' tag">
		<choose>
        <when>
          <test>
              <equal>
                <clip pos="1" side="tl" part="a_case"/>
                <lit-tag v="Com"/>
              </equal>
          </test>
          <let>
            <var n="com_num"/>
			<lit-tag v="Sg"/>
          </let>
        </when>
        <otherwise>
          <let>
            <var n="com_num"/>
			<lit v=""/>
          </let>
        </otherwise>
      </choose>
	</def-macro>
    <def-macro n="set_qst_mark1" npar="1">
      <choose>
        <when>
          <test>
            <equal>
              <clip pos="1" side="sl" part="a_qst"/>
              <lit-tag v="Qst_ko"/>
            </equal>
          </test>
          <let>
            <clip pos="1" side="tl" part="a_qst"/>
            <lit-tag v="Qst"/>
          </let>
        </when>
      </choose>
    </def-macro>
    
    <def-macro n="set_loc_loc1" npar="1" c="arg.1: noun. Change Ela/Ade/Ine/Abl into Loc">
      <choose>
        <when>
          <test>
            <!--
<and>
<or>
<begins-with>
<clip pos="1" side="sl" part="a_nom"/><lit-tag v="N"/>
</begins-with>
<begins-with>
<clip pos="1" side="sl" part="a_pron"/><lit-tag v="Pron"/>
</begins-with>
</or>-->
            <or>
<!--
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="All"/>
              </equal>
-->              
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="Abl"/>
              </equal>
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="Ela"/>
              </equal>
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="Ade"/>
              </equal>
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="Ine"/>
              </equal>
            </or>
            <!--					</and>-->
          </test>
          <let>
            <clip pos="1" side="tl" part="a_case"/>
            <lit-tag v="Loc"/>
          </let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="set_all_ill1" npar="1" c="arg.1: noun. Change All into Ill">
      <choose>
        <when>
          <test>
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="All"/>
              </equal>
          </test>
          <let>
            <clip pos="1" side="tl" part="a_case"/>
            <lit-tag v="Ill"/>
          </let>
        </when>
      </choose>
    </def-macro>
    
    <!--
Tra can be both Ill and Ess.
Käännän suomeksi - Jorgalan suomagillii.
Tulin lääkäriksi - šadden doavttirin.    
So, Tra > Ess if predicative. But for this we need syntactic tags.
    -->
    <def-macro n="set_tra_ill1" npar="1" c="arg.1: noun. Change Tra into Ill">
      <choose>
        <when>
          <test>
            <!--		<and>
<or>
<begins-with>
<clip pos="1" side="sl" part="a_nom"/><lit-tag v="N"/>
</begins-with>
<begins-with>
<clip pos="1" side="sl" part="a_pron"/><lit-tag v="Pron"/>
</begins-with>
</or>-->
            <equal>
              <clip pos="1" side="sl" part="a_case"/>
              <lit-tag v="Tra"/>
            </equal>
            <!--					</and>-->
          </test>
          <let>
            <clip pos="1" side="tl" part="a_case"/>
            <lit-tag v="Ill"/>
          </let>
        </when>
      </choose>
    </def-macro>
    <def-macro n="set_syntag1" npar="1">
      <choose>
        <when>
          <test>
            <not>
              <equal>
                <clip pos="1" side="tl" part="syntag"/>
                <lit v=""/>
              </equal>
            </not>
          </test>
          <let>
            <var n="current_syntag"/>
            <clip pos="1" side="tl" part="syntag"/>
          </let>
        </when>
        <otherwise>
          <let>
            <var n="current_syntag"/>
            <lit-tag v="@X"/>
          </let>
        </otherwise>
      </choose>
    </def-macro>
    <def-macro n="set_par_gen2" npar="2">
      <call-macro n="set_par_gen1">
        <with-param pos="1"/>
      </call-macro>
      <call-macro n="set_par_gen1">
        <with-param pos="2"/>
      </call-macro>
    </def-macro>
    <def-macro n="set_par_gen1" npar="1" c="arg.1: pronoun. Change Par into Gen">
      <choose>
        <when>
          <test>
            <and>
              <equal>
                <clip pos="1" side="sl" part="syntag"/>
                <lit-tag v="@←SPRED"/>
              </equal>
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="Par"/>
              </equal>
            </and>
          </test>
          <let>
            <clip pos="1" side="tl" part="a_case"/>
            <lit-tag v="Nom"/>
          </let>
        </when>
        <when>
          <test>
            <equal>
              <clip pos="1" side="sl" part="a_case"/>
              <lit-tag v="Par"/>
            </equal>
          </test>
          <let>
            <clip pos="1" side="tl" part="a_case"/>
            <lit-tag v="Gen"/>
          </let>
        </when>
      </choose>
    </def-macro>
    <def-macro n="strip_nbr" npar="1" c="Strip the nbr tag">
      <choose>
        <when>
          <test>
            <or>
              <equal>
                <clip pos="1" side="sl" part="nbr"/>
                <lit-tag v="Pl"/>
              </equal>
              <equal>
                <clip pos="1" side="sl" part="nbr"/>
                <lit-tag v="Sg"/>
              </equal>
            </or>
          </test>
          <let>
            <clip pos="1" side="tl" part="nbr"/>
            <lit v=""/>
          </let>
        </when>
      </choose>
    </def-macro>
  </section-def-macros>
  <section-rules>
    <!-- begin pronoun rules -->
    <rule comment="regla: pron.indef">
      <!-- indefinite pronouns 'juohke' have no number/case in sámi -->
      <pattern>
        <pattern-item n="pronindef"/>
      </pattern>
      <action>
        <out>
          <chunk name="pron" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PRN.INDEF"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_pron"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: pron.pers">
      <pattern>
        <pattern-item n="pronpers"/>
      </pattern>
      <action>
        <call-macro n="set_loc_loc1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_all_ill1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_tra_ill1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_par_gen1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="strip_nbr">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="pron" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PRN"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
              <tag><clip pos="1" side="sl" part="nbr"/></tag>
              <tag><clip pos="1" side="sl" part="a_person"/></tag>
              <tag><clip pos="1" side="sl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_pron"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_person"/>
              <clip pos="1" side="tl" part="a_case"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: pron.refl">
      <pattern>
        <pattern-item n="pronrefl"/>
      </pattern>
      <action>
        <call-macro n="set_loc_loc1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_all_ill1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_tra_ill1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_par_gen1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="pron" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PRN.REFL"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_pron"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="a_pxprs"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: pron">
      <pattern>
        <pattern-item n="pron"/>
      </pattern>
      <action>
        <call-macro n="set_loc_loc1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_all_ill1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_tra_ill1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_par_gen1">
          <with-param pos="1"/>
        </call-macro>
        <choose>
          <when>
            <test>
              <equal>
                <clip pos="1" side="tl" part="a_case"/>
                <lit-tag v="Ess"/>
              </equal>
            </test>
            <call-macro n="strip_nbr">
              <with-param pos="1"/>
            </call-macro>
          </when>
        </choose>
        <out>
          <chunk name="pron" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PRN"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
              <tag><clip pos="1" side="sl" part="nbr"/></tag>
              <tag><clip pos="1" side="sl" part="a_person"/></tag>
              <tag><clip pos="1" side="sl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_pron"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_person"/>
              <clip pos="1" side="tl" part="a_case"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <!-- end pronoun rules -->
    <!-- begin verb rules -->
	<rule comment="regla: participles">
		<pattern>
			<pattern-item n="pcps" />
		</pattern>
		<action>
			
			<out>
				<chunk name="inf" case="caseFirstWord">
					<tags>
						<tag><lit-tag v="PCP"/></tag>
						<tag><clip pos="1" side="sl" part="syntag"/></tag>
					</tags>
					<lu>
						<clip pos="1" side="tl" part="lem"/>
						<clip pos="1" side="tl" part="a_verb"/>
						<clip pos="1" side="tl" part="a_realis"/>
					</lu>
				</chunk>
			</out>
		</action>
	</rule>
    <rule comment="regla: infs. Fin Inf3 Inf2 Inf1 → sme Inf">
      <!-- Test: Minä menen katsomaan, Käyn katsomassa. -->
      <pattern>
        <pattern-item n="inf"/>
      </pattern>
      <action>
        <choose>
          <when>
            <test>
              <or>
                <equal>
                  <clip pos="1" side="sl" part="a_realis"/>
                  <lit-tag v="Inf1"/>
                </equal>
                <equal>
                  <clip pos="1" side="sl" part="a_realis"/>
                  <lit-tag v="Inf2"/>
                </equal>
                <equal>
                  <clip pos="1" side="sl" part="a_realis"/>
                  <lit-tag v="Inf3"/>
                </equal>
              </or>
            </test>
            <let>
              <clip pos="1" side="tl" part="a_realis"/>
              <lit-tag v="Inf"/>
            </let>
          </when>
        </choose>
        <out>
          <chunk name="inf" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="INF"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_verb"/>
              <!-- <clip pos="1" side="tl" part="a_trans" /> -->
              <!-- specified in a_verb -->
              <clip pos="1" side="tl" part="a_realis"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: v_actor">
      <pattern>
        <pattern-item n="v_actor"/>
      </pattern>
      <action>
        <call-macro n="set_loc_loc1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_all_ill1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_tra_ill1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_par_gen1">
          <with-param pos="1"/>
        </call-macro>
        <choose>
          <when>
            <test>
              <equal>
                <clip pos="1" side="tl" part="a_case"/>
                <lit-tag v="Ess"/>
              </equal>
            </test>
            <call-macro n="strip_nbr">
              <with-param pos="1"/>
            </call-macro>
          </when>
        </choose>
        <out>
          <!-- this should be treated as any other noun -->
          <chunk name="nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="N"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_verb"/>
              <lit-tag v="Der2.Actor.N"/>
              <!-- <clip pos="1" side="tl" part="gen"/> -->
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="a_pxprs"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: neg verb">
      <pattern>
        <pattern-item n="neg_verb"/>
      </pattern>
      <action>
        <choose>
          <when>
            <test>
              <not>
                <equal>
                  <clip pos="1" side="tl" part="a_realis"/>
                  <lit-tag v="Imprt"/>
                </equal>
              </not>
            </test>
            <let>
              <var n="cur_verb_mood"/>
              <lit-tag v="Ind"/>
            </let>
          </when>
        </choose>
        <call-macro n="set_qst_mark1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="V.NEG"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_verb"/>
              <!-- <clip pos="1" side="tl" part="a_trans" /> -->
              <!-- specified in a_verb -->
              <clip pos="1" side="tl" part="a_realis"/>
              <clip pos="1" side="tl" part="a_voice"/>
              <var n="cur_verb_mood"/>
              <!--<clip pos="1" side="tl" part="a_tense" />-->
              <clip pos="1" side="tl" part="a_person"/>
              <clip pos="1" side="tl" part="a_neg"/>
              <clip pos="1" side="tl" part="a_qst"/>
            </lu>
          </chunk>
        </out>
        <let>
          <var n="cur_verb_mood"/>
          <lit v=""/>
        </let>
      </action>
    </rule>
    <rule comment="regla: verb">
      <pattern>
        <pattern-item n="verb"/>
      </pattern>
      <action>
        <choose>
          <when>
            <test>
              <or>
                <equal>
                  <clip pos="1" side="sl" part="a_realis"/>
                  <lit-tag v="Pot"/>
                </equal>
                <equal>
                  <clip pos="1" side="sl" part="a_realis"/>
                  <lit-tag v="Cond"/>
                </equal>
              </or>
            </test>
            <let>
              <var n="cur_verb_tense"/>
              <lit-tag v="Prs"/>
            </let>
          </when>
        </choose>
        <call-macro n="set_qst_mark1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="V"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_verb"/>
              <!-- <clip pos="1" side="tl" part="a_trans" /> -->
              <!-- specified in a_verb -->
              <clip pos="1" side="tl" part="a_realis"/>
              <clip pos="1" side="tl" part="a_voice"/>
              <clip pos="1" side="tl" part="a_tense"/>
              <var n="cur_verb_tense"/>
              <clip pos="1" side="tl" part="a_person"/>
              <clip pos="1" side="tl" part="a_neg"/>
              <clip pos="1" side="tl" part="a_qst"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <let>
          <var n="cur_verb_mood"/>
          <lit v=""/>
        </let>
        <let>
          <var n="cur_verb_tense"/>
          <lit v=""/>
        </let>
      </action>
    </rule>
    <!-- end verb rules -->
    <!-- begin noun rules -->
    <rule comment="regla: nom">
      <pattern>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_loc_loc1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_all_ill1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_tra_ill1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_par_gen1">
          <with-param pos="1"/>
        </call-macro>
 		<call-macro n="set_com_number">
			<with-param pos="1" />
		</call-macro>
       <choose>
          <when>
            <test>
              <equal>
                <clip pos="1" side="tl" part="a_case"/>
                <lit-tag v="Ess"/>
              </equal>
            </test>
            <call-macro n="strip_nbr">
              <with-param pos="1"/>
            </call-macro>
          </when>
        </choose>
        <out>
          <chunk name="nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="current_syntag"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <!-- <clip pos="1" side="tl" part="gen"/> -->
      	  <var n="com_num"/> <!-- only in use in Comitative -->
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="a_pxprs"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: attrmod nom">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_syntag1">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_loc_loc1">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_all_ill1">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_tra_ill1">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_par_gen1">
              <with-param pos="2"/>
            </call-macro>
        <choose>
          <when>
            <test>
              <equal>
                <clip pos="2" side="tl" part="a_case"/>
                <lit-tag v="Ess"/>
              </equal>
            </test>
            <call-macro n="strip_nbr">
              <with-param pos="2"/>
            </call-macro>
          </when>
        </choose>
        <out>
          <chunk name="adj_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="current_syntag"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_adj"/>
			  <lit-tag v="Attr" />
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lem"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="a_case"/>
              <clip pos="2" side="tl" part="a_pxprs"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="regla: attrmod nom"> <!-- I get the feeling this is not doing what i intend: hän kutsui {sitä eedeniksi}, should not be grouped in this case -->
      <pattern>
        <pattern-item n="attrmod"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_syntag1">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_loc_loc1">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_all_ill1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_tra_ill1">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_par_gen2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <choose>
          <when>
            <test>
              <equal>
                <clip pos="2" side="tl" part="a_case"/>
                <lit-tag v="Ess"/>
              </equal>
            </test>
            <call-macro n="strip_nbr">
              <with-param pos="2"/>
            </call-macro>
          </when>
        </choose>
        <out>
          <chunk name="attr_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="current_syntag"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_attr"/>
              <!-- <clip pos="1" side="tl" part="gen"/> -->
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="a_pxprs"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lem"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <!-- <clip pos="1" side="tl" part="gen"/> -->
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="a_case"/>
              <clip pos="2" side="tl" part="a_pxprs"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: NUM NomMod"> <!-- Áhčis leat 2 máná. WORKS-->
      <pattern>
        <pattern-item n="num"/>
        <pattern-item n="num_mod"/>
      </pattern>
      <action>
        <call-macro n="set_loc_loc1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_all_ill1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_tra_ill1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_par_gen2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <out>
          <chunk name="num_mod" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="a_case"/>
              <clip pos="2" side="tl" part="a_pxprs"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <!-- end noun rules -->
    <!-- begin adjective rules -->
    <rule comment="regla: adj">
      <pattern>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <call-macro n="set_loc_loc1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_all_ill1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_tra_ill1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_par_gen1">
          <with-param pos="1"/>
        </call-macro>
        <choose> <!-- why is this not stripping number on ordinals? -->
          <when>
            <test>
              <equal>
                <clip pos="1" side="tl" part="a_case"/>
                <lit-tag v="Ess"/>
              </equal>
            </test>
            <call-macro n="strip_nbr">
              <with-param pos="1"/>
            </call-macro>
          </when>
        </choose>
        <!-- <choose>
			<when>
				<test>
					<equal>
						<clip pos="1" side="tl" part="a_adj"/>
						<lit-tag v="A.Agr"/>
					</equal>
				</test>
				<let>
					<clip pos="1" side="tl" part="a_adj"/>
					<lit-tag v="A"/>
				</let>
			</when>
		</choose> -->
        <out>
          <chunk name="adj" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="A"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
              <tag><clip pos="1" side="sl" part="nbr"/></tag>
              <tag><clip pos="1" side="sl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <!-- <clip pos="1" side="tl" part="gen"/> -->
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="a_pxprs"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <!-- end adjective rules -->
    <!-- begin unsorted rules -->
    <rule comment="REGLA: ORD">
      <pattern>
        <pattern-item n="ord"/>
      </pattern>
      <action>
        <call-macro n="set_par_gen1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="adj" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="A.ORD"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
              <tag><clip pos="1" side="sl" part="nbr"/></tag>
              <tag><clip pos="1" side="sl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_ord"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: *** NUMERAL NOM">
      <pattern>
        <pattern-item n="num"/>
	    <pattern-item n="nom"/>
      </pattern>
      <action>
	    <call-macro n="set_loc_loc1">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_all_ill1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_tra_ill1">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_par_gen1">
          <with-param pos="2"/>
        </call-macro>
        <choose><!-- Strip number on attr if essive -->
          <when>
            <test>
              <equal>
                <clip pos="1" side="tl" part="a_case"/>
                <lit-tag v="Ess"/>
              </equal>
            </test>
            <call-macro n="strip_nbr">
              <with-param pos="1"/>
            </call-macro>
          </when>
        </choose>
        <choose> <!-- Strip number on head if essive. TODO: doesn't work! -->
          <when>
            <test>
              <equal>
                <clip pos="2" side="tl" part="a_case"/>
                <lit-tag v="Ess"/>
              </equal>
            </test>
            <call-macro n="strip_nbr">
              <with-param pos="1"/>
            </call-macro>
          </when>
        </choose>
		<choose> <!-- if noun case is loc or ill, then attr is acc/gen -->
			<when>
				<test>
					<or>
						<equal>
							<clip pos="2" side="tl" part="a_case"/>
							<lit-tag v="Loc" />
						</equal>
						<equal>
							<clip pos="2" side="tl" part="a_case"/>
							<lit-tag v="Ill" />
						</equal>
					</or>
				</test>
				<let>
					<clip pos="1" side="tl" part="a_case"/>
					<lit-tag v="Gen"/>
				</let>
			</when>
		</choose>
        <out>
          <chunk name="num" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="NUM"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
              <tag><clip pos="1" side="sl" part="nbr"/></tag>
              <tag><clip pos="1" side="sl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <!--<clip pos="1" side="tl" part="a_pxprs"/>-->
              <!-- fin numerals have this, sme ones don't -->
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
			<b pos="1"/><!-- space -->
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="a_case"/>
              <!--<clip pos="1" side="tl" part="a_pxprs"/>-->
              <!-- fin numerals have this, sme ones don't -->
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
			
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: NUMERAL">
      <pattern>
        <pattern-item n="num"/>
      </pattern>
      <action>
        <choose>
          <when>
            <test>
              <equal>
                <clip pos="1" side="tl" part="a_case"/>
                <lit-tag v="Ess"/>
              </equal>
            </test>
            <call-macro n="strip_nbr">
              <with-param pos="1"/>
            </call-macro>
          </when>
        </choose>
        <out>
          <chunk name="num" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="NUM"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
              <tag><clip pos="1" side="sl" part="nbr"/></tag>
              <tag><clip pos="1" side="sl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <!--<clip pos="1" side="tl" part="a_pxprs"/>-->
              <!-- fin numerals have this, sme ones don't -->
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: CONJUNCTION">
      <pattern>
        <pattern-item n="conj"/>
      </pattern>
      <action>
        <out>
          <chunk name="conj" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="CONJ"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_conj"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: ADVERB">
      <pattern>
        <pattern-item n="adv"/>
      </pattern>
      <action>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adv"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

	<!-- There currently shouldn't be many finnish adpositions that don't have a po or pr reading, but I want adpositions not to transfer yet so that something breaks and I notice. -->
    <rule comment="REGLA: POSTPOSITIONS">
      <pattern>
        <pattern-item n="postpos"/>
      </pattern>
      <action>
            <out>
              <chunk name="adp" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="ADP"/></tag>
                  <tag><clip pos="1" side="sl" part="syntag"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adp"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out> 
      </action>
    </rule>
    <rule comment="REGLA: PREPOSITIONS">
      <pattern>
        <pattern-item n="prepos"/>
      </pattern>
      <action>
          <!-- Prepositions need to be transfered to postpositions -->
            <out>
              <chunk name="pr" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="PR"/></tag>
                  <tag><clip pos="1" side="sl" part="syntag"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adp"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out> 
      </action>
    </rule>
    <rule comment="REGLA: PARTICLE">
      <pattern>
        <pattern-item n="pcle"/>
      </pattern>
      <action>
        <choose>
          <!-- Sometimes Pcle can be translated by Adv, this allows that -->
          <when>
            <test>
              <equal>
                <clip pos="1" side="tl" part="a_adv"/>
                <lit-tag v="Adv"/>
              </equal>
            </test>
            <out>
              <chunk name="adv" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="ADV"/></tag>
                  <tag><clip pos="1" side="sl" part="syntag"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adv"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise>
            <out>
              <chunk name="pcle" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="PCLE"/></tag>
                  <tag><clip pos="1" side="sl" part="syntag"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_pcle"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>
    <rule comment="REGLA: PUNCTUATION CLB">
      <pattern>
        <pattern-item n="punct_clb"/>
      </pattern>
      <action>
        <out>
          <chunk name="punct" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="CLB"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <!-- end unsorted rules -->
  </section-rules>
</transfer>
