<?xml version="1.0" encoding="utf-8"?>
<transfer default="chunk">
  <section-def-cats>
    <def-cat n="copulasg3">
      <cat-item lemma="olla" tags="V.Act.Ind.Prs.Sg3.@+FAUXV"/>
    </def-cat>
    <def-cat n="conj">
      <cat-item tags="CC"/>
      <cat-item tags="CS"/>
      <cat-item tags="CC.*"/>
      <cat-item tags="CS.*"/>
    </def-cat>
    <def-cat n="adv">
      <cat-item tags="Adv"/>
      <cat-item tags="Adv.*"/>
    </def-cat>
    <def-cat n="pcle">
      <cat-item tags="Pcle"/>
      <cat-item tags="Pcle.*"/>
    </def-cat>
    <def-cat n="postpos">
      <cat-item tags="Po.*"/>
    </def-cat>
    <def-cat n="prepos">
      <cat-item tags="Pr.*"/>
    </def-cat>
    <def-cat n="adpos">
      <cat-item tags="Adp.*"/>
    </def-cat>
    <def-cat n="neg_verb">
      <cat-item tags="V.Neg.*"/>
    </def-cat>
    <def-cat n="verb">
      <cat-item tags="V.*"/>
    </def-cat>
    <def-cat n="vpass">
      <cat-item tags="V.Pass.*"/>
    </def-cat>
    <def-cat n="prsprcpass">
      <cat-item tags="V.Pass.PrsPrc.*"/>
    </def-cat>
    <def-cat n="pcps">
      <cat-item tags="V.*.PrfPrc.*"/>
      <cat-item tags="V.*.PrsPrc.*"/>
    </def-cat>
    <def-cat n="inf">
      <cat-item tags="V.*.Inf1.*"/>
    </def-cat>
    <def-cat n="inf2">
      <cat-item tags="V.*.Inf2.Sg.Ins.*"/>
      <cat-item tags="V.*.Inf2.Sg.Ine.*"/>
    </def-cat>
    <def-cat n="inf3">
      <cat-item tags="V.*.Inf3.*"/>
    </def-cat>
    <def-cat n="v_actor">
      <cat-item tags="V.Der_ja.*"/>
      <!-- fin -->
      <cat-item tags="V.Der_n.*"/>
      <!-- sme -->
    </def-cat>
    <def-cat n="appearance">
      <cat-item lemma="henki" tags="N.Pl.Abl.*"/>
      <cat-item lemma="ulkonäkö" tags="N.Pl.Abl.*"/>
      <cat-item lemma="nimi" tags="N.Sg.Abl.*"/>
      <!-- More? -->
    </def-cat>
    <def-cat n="num_mod">
      <cat-item tags="N.*.*.@Num←"/>
    </def-cat>
    <def-cat n="nom_cmpnd">
      <cat-item tags="N.*.*.Cmpnd"/>
    </def-cat>
    <def-cat n="attrmod">
      <cat-item tags="Pron.Dem.*.*."/>
      <cat-item tags="Pron.Interr.*.*."/>
      <cat-item tags="Pron.Rel.*.*.@N→"/>
    </def-cat>
    <def-cat n="attrnom_1">
      <!-- Svonni's grupp 1 -->
      <cat-item tags="Pron.Dem.*.*.@N→"/>
      <!-- dat, dát, diet, dot, duot -->
      <cat-item tags="Pron.Indef.*.*."/>
      <!-- goappašat, guktot -->
      <!-- <cat-item tags="Pron.Interr.*.*."/> -->
      <!-- guhte, goabbá -->
	  <!-- <cat-item tags="Pron.Rel.*.*.@N→"/> -->
      <!-- guhte, goabbá ?? maybe remove interr? -->
      <cat-item lemma="hyvä" tags="A.*"/>
      <!-- buorre -->
      <cat-item lemma="paha" tags="A.*"/>
      <!-- paha -->
      <cat-item lemma="yksi" tags="Num.*"/>
      <!-- okta -->
    </def-cat>
    <def-cat n="attrnom_2">
      <!-- Svonni's grupp 2 -->
      <cat-item tags="Pron.Interr.*.*."/>
      <!-- mii gii only? -->
    </def-cat>
    <def-cat n="attrnom_3">
      <!-- Svonni's grupp 3 -->
      <cat-item tags="Num.Card.*"/>
      <!-- how to do all numbers except for one? -->
      <cat-item lemma="usea" tags="A.*"/>
      <!-- máŋga -->
      <!-- <cat-item lemma="galle" tags="A.*"/>
      <cat-item lemma="moadde" tags="Num.*"/> -->
    </def-cat>
    <def-cat n="buot">
      <cat-item lemma="kaikki" tags="Pron.Indef.*"/>
    </def-cat>
    <def-cat n="ord">
      <cat-item tags="Num.Ord.*"/>
    </def-cat>
    <def-cat n="num">
      <cat-item tags="Num.Card.*"/>
    </def-cat>
    <def-cat n="nums">
      <cat-item tags="Num.*"/>
    </def-cat>
    <!-- 
	esimerkki:
	<def-cat n="pcle.qst">
	      <cat-item lemma="go" tags="Pcle.*"/>
    </def-cat>
	<def-cat n="month">
      <cat-item lemma="guovvamánnu" tags="N.*"/>
      <cat-item lemma="ođđajagimánnu" tags="N.*"/>
      <cat-item lemma="guovvamánnu" tags="N.*"/>
	</def-cat>
	-->
    <def-cat n="attrgen">
      <cat-item tags="N.*.Gen.@→N"/>
      <cat-item tags="Pron.Pers.*.Gen.@→N"/>
    </def-cat>
    <def-cat n="nom">
      <cat-item tags="N.*"/>
      <cat-item tags="N.Prop.*"/>
      <cat-item tags="N.Prop.Plc.*"/>
      <cat-item tags="N.Prop.Mal.*"/>
    </def-cat>
    <def-cat n="oma">
      <cat-item lemma="oma" tags="A.Pos.*"/>
    </def-cat>
    <def-cat n="oma_attr">
		<cat-item lemma="oma" tags="A.Pos.*.*.*.@→N"/>
    </def-cat>
    <def-cat n="attr">
      <cat-item tags="A.*.*.*.@→N"/>
      <cat-item lemma="tällainen" tags="Pron.*"/>
      <cat-item lemma="sellainen" tags="Pron.*"/>
      <cat-item lemma="semmoinen" tags="Pron.*"/>
      <cat-item lemma="tuommoinen" tags="Pron.*"/>
      <cat-item lemma="millainen" tags="Pron.*"/>
    </def-cat>
    <def-cat n="adj_oma">
      <cat-item lemma="oma" tags="A.Pos.*"/>
    </def-cat>
    <def-cat n="adj">
      <cat-item tags="A"/>
      <cat-item tags="A.*"/>
    </def-cat>
    <def-cat n="pronrefl">
      <cat-item tags="Pron.Refl.*"/>
    </def-cat>
    <def-cat n="pronindef">
      <cat-item tags="Pron.Indef.*"/>
    </def-cat>
    <def-cat n="pron_pers">
      <cat-item tags="Pron.Pers.*"/>
    </def-cat>
    <def-cat n="punct_clb">
      <cat-item tags="Punct.CLB"/>
      <cat-item tags="Punct.CLB.*"/>
    </def-cat>
    <def-cat n="pron_rel">
      <cat-item tags="Pron.Rel.*"/>
    </def-cat>
    <def-cat n="pron_dem">
      <cat-item tags="Pron.Dem.*"/>
    </def-cat>
    <def-cat n="pron">
      <cat-item tags="Pron.*"/>
    </def-cat>
  </section-def-cats>
  <section-def-attrs>
    <def-attr n="gen">
      <attr-item tags="Fem"/>
      <attr-item tags="Masc"/>
    </def-attr>
    <def-attr n="a_verb">
      <attr-item tags="V"/>
      <attr-item tags="V.IV"/>
      <attr-item tags="V.TV"/>
      <attr-item tags="V.IV.Neg"/>
    </def-attr>
    <def-attr n="a_pron">
      <attr-item tags="Pron"/>
      <attr-item tags="Pron.Pers"/>
      <attr-item tags="Pron.Dem"/>
      <attr-item tags="Pron.Rel"/>
      <attr-item tags="Pron.Recipr"/>
      <attr-item tags="Pron.Refl"/>
      <attr-item tags="Pron.Interr"/>
      <attr-item tags="Pron.Qnt"/>
      <attr-item tags="Pron.Indef"/>
    </def-attr>
    <def-attr n="a_ord">
      <attr-item tags="Ord"/>
      <attr-item tags="A.Ord"/>
    </def-attr>
    <def-attr n="a_num">
      <attr-item tags="Num"/>
      <attr-item tags="A.Ord"/>
      <attr-item tags="Num.Ord"/>
      <attr-item tags="Num.Card"/>
    </def-attr>
    <def-attr n="a_adv">
      <attr-item tags="Adv"/>
    </def-attr>
    <def-attr n="a_adp">
      <attr-item tags="Pr"/>
      <attr-item tags="Po"/>
      <attr-item tags="Adp"/>
    </def-attr>
    <def-attr n="nbr">
      <attr-item tags="Sg"/>
      <attr-item tags="Pl"/>
    </def-attr>
    <def-attr n="a_pcle">
      <attr-item tags="Pcle"/>
    </def-attr>
    <def-attr n="a_conj">
      <attr-item tags="CC"/>
      <attr-item tags="CS"/>
    </def-attr>
    <def-attr n="a_attrs">
      <attr-item tags="A"/>
      <attr-item tags="A.Attr"/>
      <attr-item tags="A.Agr"/>
      <attr-item tags="A.Pos"/>
      <attr-item tags="Pron"/>
    </def-attr>
    <def-attr n="a_adj">
      <attr-item tags="A"/>
      <attr-item tags="A.Attr"/>
      <attr-item tags="A.Agr"/>
      <attr-item tags="A.Pos"/>
    </def-attr>
    <def-attr n="a_nom">
      <attr-item tags="N"/>
      <attr-item tags="N.Actor"/>
      <attr-item tags="N.Prop"/>
      <attr-item tags="N.Prop.Plc"/>
      <attr-item tags="N.Prop.Mal"/>
    </def-attr>
    <def-attr n="a_attr">
      <attr-item tags="N"/>
      <attr-item tags="A"/>
      <attr-item tags="A.Ord"/>
      <attr-item tags="N.Actor"/>
      <attr-item tags="N.Prop"/>
      <attr-item tags="N.Prop.Plc"/>
      <attr-item tags="N.Prop.Mal"/>
      <attr-item tags="Pron.Dem"/>
      <attr-item tags="Pron.Interr"/>
      <attr-item tags="Pron.Indef"/>
    </def-attr>
    <def-attr n="gen_attrs">
      <attr-item tags="N"/>
      <attr-item tags="N.Actor"/>
      <attr-item tags="N.Prop"/>
      <attr-item tags="N.Prop.Plc"/>
      <attr-item tags="N.Prop.Mal"/>
      <attr-item tags="Pron.Pers"/>
    </def-attr>
    <def-attr n="a_case">
      <attr-item tags="Nom"/>
      <attr-item tags="Gen"/>
      <attr-item tags="Acc"/>
      <attr-item tags="Par"/>
      <attr-item tags="Abl"/>
      <attr-item tags="Ade"/>
      <attr-item tags="All"/>
      <attr-item tags="Ela"/>
      <attr-item tags="Ill"/>
      <attr-item tags="Ine"/>
      <attr-item tags="Ess"/>
      <attr-item tags="Tra"/>
      <attr-item tags="Abe"/>
      <attr-item tags="Com"/>
      <attr-item tags="Ins"/>
      <attr-item tags="Loc"/>
    </def-attr>
    <def-attr n="a_pronattrs">
      <attr-item tags="Dem"/>
      <attr-item tags="Pers"/>
    </def-attr>
    <def-attr n="a_poss">
      <attr-item tags="Sg1"/>
      <attr-item tags="Sg2"/>
      <attr-item tags="Pl1"/>
      <attr-item tags="Pl2"/>
      <attr-item tags="Poss3"/>
      <!-- Hmm, is this inconsistency a problem? -->
    </def-attr>
    <def-attr n="a_der">
      <attr-item tags="Def_ja"/>
      <attr-item tags="Der2"/>
    </def-attr>
    <def-attr n="a_voice">
      <attr-item tags="Act"/>
      <attr-item tags="Pass"/>
    </def-attr>
    <def-attr n="a_trans">
      <attr-item tags="IV"/>
      <attr-item tags="TV"/>
    </def-attr>
    <def-attr n="a_realis">
      <attr-item tags="Ind"/>
      <attr-item tags="Imprt"/>
      <attr-item tags="Cond"/>
      <attr-item tags="Pot"/>
      <attr-item tags="Inf1"/>
      <attr-item tags="Inf2"/>
      <attr-item tags="Inf3"/>
      <attr-item tags="PrfPrc"/>
      <attr-item tags="PrsPrc"/>
      <attr-item tags="Inf"/>
      <attr-item tags="Actio"/>
      <attr-item tags="VAbess"/>
      <attr-item tags="VGen"/>
    </def-attr>
    <def-attr n="a_neg">
      <attr-item tags="ConNeg"/>
    </def-attr>
    <def-attr n="a_qst">
      <attr-item tags="Qst.*"/>
    </def-attr>
    <def-attr n="a_foc">
      <!-- Fin -->
      <attr-item tags="Foc_han"/>
      <attr-item tags="Foc_kin"/>
      <attr-item tags="Foc_kaan"/>
      <attr-item tags="Foc_pa"/>
      <attr-item tags="Foc_s"/>
      <attr-item tags="Foc_ka"/>
      <!-- Sme -->
      <attr-item tags="Foc_ge"/>
      <attr-item tags="Foc_naj"/>
      <attr-item tags="Foc_ba"/>
    </def-attr>
    <def-attr n="a_tense">
      <attr-item tags="Prs"/>
      <attr-item tags="Prt"/>
    </def-attr>
    <def-attr n="a_person">
      <!--
      <attr-item tags="Sg"/>
      <attr-item tags="Pl"/>
-->
      <attr-item tags="Sg1"/>
      <attr-item tags="Sg2"/>
      <attr-item tags="Sg3"/>
      <attr-item tags="Pl1"/>
      <attr-item tags="Pl2"/>
      <attr-item tags="Pl3"/>
      <attr-item tags="Pe4"/>
      <attr-item tags="PD"/>
    </def-attr>
    <def-attr n="a_pxprs">
      <attr-item tags="PxSg1"/>
      <attr-item tags="PxSg2"/>
      <attr-item tags="PxSg3"/>
      <attr-item tags="PxPl1"/>
      <attr-item tags="PxPl2"/>
      <attr-item tags="PxPl3"/>
    </def-attr>
    <def-attr n="syntag">
      <attr-item tags="@X"/>
      <attr-item tags="@HNOUN"/>
      <attr-item tags="@CNP"/>
      <attr-item tags="@CVP"/>
      <attr-item tags="@→N"/>
      <attr-item tags="@←OBJ"/>
      <attr-item tags="@OBJ"/>
      <attr-item tags="@-F←OBJ"/>
      <attr-item tags="@SUBJ→"/>
      <attr-item tags="@←SUBJ"/>
      <attr-item tags="@SPRED→"/>
      <attr-item tags="@←SPRED"/>
      <attr-item tags="@\+FMAINV"/>
      <attr-item tags="@-FMAINV"/>
      <attr-item tags="@\+FAUXV"/>
      <attr-item tags="@ADVL"/>
      <attr-item tags="@←ADVL"/>
      <attr-item tags="@ADVL→"/>
      <attr-item tags="@HAB"/>
      <attr-item tags="@Num←"/>
      <attr-item tags="@→Num"/>
      <attr-item tags="@INTERJ"/>
      <attr-item tags="@PCLE"/>
      <attr-item tags="@OPRED→"/>
      <attr-item tags="@←OPRED"/>
      <attr-item tags="@→P"/>
      <attr-item tags="@P←"/>
      <attr-item tags="@-FSUBJ→"/>
      <attr-item tags="@-FOBJ→"/>
      <attr-item tags="@-F←OBJ"/>
    </def-attr>
  </section-def-attrs>
  <section-def-vars>
    <def-var n="cur_derivation"/> <!-- for example Der2.Der_PassL.V -->
    <def-var n="number"/>
    <def-var n="case"/>
    <def-var n="comitative_num"/>
    <def-var n="default_px"/>
    <def-var n="buot_buohkat"/>
    <def-var n="demonstrative"/>
    <def-var n="current_syntag"/>
    <def-var n="cur_verb_mood"/>
    <def-var n="cur_verb_tense"/>
    <def-var n="cur_person"/>
    <def-var n="cur_noun_postp"/>
    <def-var n="cur_poss_suff"/>
  </section-def-vars>
  <section-def-lists>
    <def-list n="sort_pronouns">
      <!-- dákkár, dakkár, duokkár, makkár -->
      <list-item v="tällainen"/>
      <list-item v="sellainen"/>
      <list-item v="semmoinen"/>
      <list-item v="tuommoinen"/>
      <list-item v="millainen"/>
    </def-list>
    <def-list n="sense_words">
      <!-- hengiltään, ulkonäöltään, nimeltään, etc. -->
      <list-item v="henki"/>
      <list-item v="ulkonäkö"/>
      <list-item v="nimi"/>
      <list-item v="koko"/>
      <list-item v="muoto"/>
      <list-item v="väritys"/>
      <list-item v="sija"/>
    </def-list>
  </section-def-lists>
  <section-def-macros>
    <def-macro n="derive_verb_pass1" npar="1">
      <let>
        <var n="cur_derivation"/>
        <lit v=""/>
      </let>
       <choose>
        <when>
          <test>
            <equal>
              <clip pos="1" side="sl" part="a_voice"/>
              <lit-tag v="Pass"/>
            </equal>
          </test>
          <let>
            <var n="cur_derivation"/>
            <lit-tag v="Der2.Der_PassL.V"/>
          </let>
         </when>
       </choose>
    </def-macro>
    <def-macro n="set_noun_postp" npar="1">
      <let>
        <var n="cur_noun_postp"/>
        <lit v=""/>
      </let>
      <choose>
        <when>
          <test>
            <equal>
              <clip pos="1" side="sl" part="a_case"/>
              <lit-tag v="Abe"/>
            </equal>
          </test>
          <let>
            <clip pos="1" side="tl" part="a_case"/>
            <lit-tag v="Gen"/>
          </let>
          <let>
            <var n="cur_noun_postp"/>
            <concat>
              <lit v="$ ^"/>
              <lit v="haga"/>
              <lit-tag v="Po"/>
            </concat>
          </let>
        </when>
        <otherwise>
          <let>
            <var n="cur_noun_postp"/>
            <lit v=""/>
          </let>
        </otherwise>
      </choose>
    </def-macro>
    <def-macro n="nominal_case_number2" npar="2" c="Parameter 1 is the head">
      <call-macro n="nominal_case_number1">
        <with-param pos="2"/>
      </call-macro>
      <call-macro n="nominal_case_number1">
        <with-param pos="1"/>
      </call-macro>
    </def-macro>
    <def-macro n="nominal_case_number1" npar="1" c="Set cases for pronouns and nouns">
      <call-macro n="set_loc_loc1">
        <with-param pos="1"/>
      </call-macro>
      <call-macro n="set_all_ill1">
        <with-param pos="1"/>
      </call-macro>
      <call-macro n="set_tra_ill1">
        <with-param pos="1"/>
      </call-macro>
      <call-macro n="set_par_gen1">
        <with-param pos="1"/>
      </call-macro>
      <call-macro n="set_comitative_number">
        <with-param pos="1"/>
      </call-macro>
      <choose>
        <!-- strip number when case is essive -->
        <when>
          <test>
            <equal>
              <clip pos="1" side="tl" part="a_case"/>
              <lit-tag v="Ess"/>
            </equal>
          </test>
          <call-macro n="strip_nbr">
            <with-param pos="1"/>
          </call-macro>
        </when>
      </choose>
      <call-macro n="set_syntag1">
        <with-param pos="1"/>
      </call-macro>
      <!-- Following macro relies on syntag set -->
      <call-macro n="subj_case_nominative">
        <with-param pos="1"/>
      </call-macro>
      <choose> <!-- This stanza sets the possessive suffix to '' if the word is in plural nominative -->
        <when>
          <test>
            <and>
              <equal>
                <clip pos="1" side="tl" part="a_case"/>
                <lit-tag v="Nom"/>
              </equal>
              <equal>
                <clip pos="1" side="tl" part="nbr"/>
                <lit-tag v="Pl"/>
              </equal>
              <not>
                <and>
                    <equal>
                      <clip pos="1" side="tl" part="a_pxprs"/>
                      <lit v=""/>
                    </equal>
                    <equal>
                      <clip pos="1" side="tl" part="a_pxprs"/>
                      <lit-tag v="PxSg1"/>
                    </equal>
                    <equal>
                      <clip pos="1" side="tl" part="a_pxprs"/>
                      <lit-tag v="PxPl1"/>
                    </equal>
                </and>
              </not>
            </and>
          </test>
          <let>
            <clip pos="1" side="tl" part="a_pxprs"/>
            <lit v=""/>
          </let>
          <let>
            <var n="default_px"/>
            <lit v=""/>
          </let>
        </when>
      </choose>

    </def-macro>
    <def-macro n="subj_case_nominative" npar="1" c="When the syntactic tag is @SUBJ, case must be nominative">
      <choose>
        <when>
          <test>
            <and>
              <or>
                <equal>
                  <var n="current_syntag"/>
                  <lit-tag v="@SUBJ→"/>
                </equal>
                <equal>
                  <var n="current_syntag"/>
                  <lit-tag v="@←SUBJ"/>
                </equal>
              </or>
              <equal>
                <clip pos="1" side="tl" part="a_case"/>
                <lit-tag v="Gen"/>
              </equal>
            </and>
          </test>
          <let>
            <clip pos="1" side="tl" part="a_case"/>
            <lit-tag v="Nom"/>
          </let>
        </when>
      </choose>
    </def-macro>
    <def-macro n="set_comitative_number" npar="1" c="When noun case is comitative, add 'Sg' tag">
      <choose>
        <when>
          <test>
            <equal>
              <clip pos="1" side="tl" part="a_case"/>
              <lit-tag v="Com"/>
            </equal>
          </test>
          <let>
            <var n="comitative_num"/>
            <lit-tag v="Sg"/>
          </let>
        </when>
        <otherwise>
          <let>
            <var n="comitative_num"/>
            <lit v=""/>
          </let>
        </otherwise>
      </choose>
    </def-macro>
    <def-macro n="set_foc_particles" npar="1" c="arg.1: a word">
      <choose>
        <when>
          <test>
              <equal>
                <clip pos="1" side="sl" part="a_foc"/>
                <lit-tag v="Foc_pa"/>
              </equal>
          </test>
          <let>
            <clip pos="1" side="tl" part="a_foc"/>
            <lit-tag v="Foc_ba"/>
          </let>
        </when>
        <when>
          <test>
              <equal>
                <clip pos="1" side="sl" part="a_foc"/>
                <lit-tag v="Foc_s"/>
              </equal>
          </test>
          <let>
            <clip pos="1" side="tl" part="a_foc"/>
            <lit v=""/>
          </let>
        </when>
        <when>
          <test>
            <or>
              <equal>
                <clip pos="1" side="sl" part="a_foc"/>
                <lit-tag v="Foc_kin"/>
              </equal>
              <equal>
                <clip pos="1" side="sl" part="a_foc"/>
                <lit-tag v="Foc_kaan"/>
              </equal>
              <equal>
                <clip pos="1" side="sl" part="a_foc"/>
                <lit-tag v="Foc_ka"/>
              </equal>
            </or>
          </test>
          <let>
            <clip pos="1" side="tl" part="a_foc"/>
            <lit-tag v="Foc_ge"/>
          </let>
        </when>
      </choose>
    </def-macro>
    <def-macro n="set_loc_loc1" npar="1" c="arg.1: noun. Change Ela/Ade/Ine/Abl into Loc">
      <choose>
        <when>
          <test>
            <!--
<and>
<or>
<begins-with>
<clip pos="1" side="sl" part="a_nom"/><lit-tag v="N"/>
</begins-with>
<begins-with>
<clip pos="1" side="sl" part="a_pron"/><lit-tag v="Pron"/>
</begins-with>
</or>-->
            <or>
              <!--
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="All"/>
              </equal>
-->
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="Abl"/>
              </equal>
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="Ela"/>
              </equal>
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="Ade"/>
              </equal>
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="Ine"/>
              </equal>
            </or>
            <!--					</and>-->
          </test>
          <let>
            <clip pos="1" side="tl" part="a_case"/>
            <lit-tag v="Loc"/>
          </let>
        </when>
      </choose>
    </def-macro>
    <def-macro n="set_ela_loc1" npar="1" c="arg.1: noun. Change Ela into Loc">
      <choose>
        <when>
          <test>
            <equal>
              <clip pos="1" side="sl" part="a_case"/>
              <lit-tag v="Ela"/>
            </equal>
          </test>
          <let>
            <clip pos="1" side="tl" part="a_case"/>
            <lit-tag v="Loc"/>
          </let>
        </when>
      </choose>
    </def-macro>
    <def-macro n="set_all_ill1" npar="1" c="arg.1: noun. Change All into Ill">
      <choose>
        <when>
          <test>
            <equal>
              <clip pos="1" side="sl" part="a_case"/>
              <lit-tag v="All"/>
            </equal>
          </test>
          <let>
            <clip pos="1" side="tl" part="a_case"/>
            <lit-tag v="Ill"/>
          </let>
        </when>
      </choose>
    </def-macro>
    <!--
Tra can be both Ill and Ess.
Käännän suomeksi - Jorgalan suomagillii.
Tulin lääkäriksi - šadden doavttirin.    
So, Tra > Ess if predicative. But for this we need syntactic tags.
    -->
    <def-macro n="set_tra_ill2" npar="1" c="two-argument version">
      <call-macro n="set_tra_ill1">
        <with-param pos="1"/>
      </call-macro>
      <call-macro n="set_tra_ill1">
        <with-param pos="2"/>
      </call-macro>
    </def-macro>
    <def-macro n="set_tra_ill1" npar="1" c="arg.1: noun. Change Tra into Ill">
      <choose>
        <when>
          <test>
            <!--		<and>
<or>
<begins-with>
<clip pos="1" side="sl" part="a_nom"/><lit-tag v="N"/>
</begins-with>
<begins-with>
<clip pos="1" side="sl" part="a_pron"/><lit-tag v="Pron"/>
</begins-with>
</or>-->
            <equal>
              <clip pos="1" side="sl" part="a_case"/>
              <lit-tag v="Tra"/>
            </equal>
            <!--					</and>-->
          </test>
          <let>
            <clip pos="1" side="tl" part="a_case"/>
            <lit-tag v="Ill"/>
          </let>
        </when>
      </choose>
    </def-macro>
    <def-macro n="set_syntag1" npar="1">
      <choose>
        <when>
          <test>
            <not>
              <equal>
                <clip pos="1" side="tl" part="syntag"/>
                <lit v=""/>
              </equal>
            </not>
          </test>
          <let>
            <var n="current_syntag"/>
            <clip pos="1" side="tl" part="syntag"/>
          </let>
        </when>
        <otherwise>
          <let>
            <var n="current_syntag"/>
            <lit-tag v="@X"/>
          </let>
        </otherwise>
      </choose>
    </def-macro>
    <def-macro n="set_par_gen2" npar="2">
      <call-macro n="set_par_gen1">
        <with-param pos="1"/>
      </call-macro>
      <call-macro n="set_par_gen1">
        <with-param pos="2"/>
      </call-macro>
    </def-macro>
    <def-macro n="set_par_gen1" npar="1" c="arg.1: pronoun. Change Par into Gen">
      <choose>
        <when>
          <test>
            <and>
              <equal>
                <clip pos="1" side="sl" part="syntag"/>
                <lit-tag v="@←SPRED"/>
              </equal>
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="Par"/>
              </equal>
            </and>
          </test>
          <let>
            <clip pos="1" side="tl" part="a_case"/>
            <lit-tag v="Nom"/>
          </let>
        </when>
        <when>
          <test>
            <or>
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="Ins"/>
              </equal>
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="Par"/>
              </equal>
            </or>
          </test>
          <let>
            <clip pos="1" side="tl" part="a_case"/>
            <lit-tag v="Gen"/>
          </let>
        </when>
      </choose>
    </def-macro>
    <def-macro n="strip_nbr2" npar="2">
      <call-macro n="strip_nbr">
        <with-param pos="1"/>
      </call-macro>
      <call-macro n="strip_nbr">
        <with-param pos="2"/>
      </call-macro>
    </def-macro>
    <def-macro n="strip_nbr" npar="1" c="Strip the nbr tag">
      <choose>
        <when>
          <test>
            <or>
              <equal>
                <clip pos="1" side="sl" part="nbr"/>
                <lit-tag v="Pl"/>
              </equal>
              <equal>
                <clip pos="1" side="sl" part="nbr"/>
                <lit-tag v="Sg"/>
              </equal>
            </or>
          </test>
          <let>
            <clip pos="1" side="tl" part="nbr"/>
            <lit v=""/>
          </let>
        </when>
      </choose>
    </def-macro>
  </section-def-macros>
  <section-rules>
    <rule comment="copulasg3 + pass prsprc">
      <pattern>
        <pattern-item n="copulasg3"/>
        <pattern-item n="prsprcpass"/>
      </pattern>
      <action>
        <call-macro n="set_syntag1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="copulasg3" case="caseFirstWord">
          <tags>
            <tag><lit-tag v="V"/></tag>
            <tag><var n="current_syntag"/></tag>
            <tag><lit-tag v="PD"/></tag>
          </tags>
          <lu>
            <lit v="fertet"/>
            <lit-tag v="V.IV.Ind.Prs.3"/>
          </lu>
          <b pos="1"/>
          <lu>
            <clip pos="2" side="tl" part="lemh"/>
            <clip pos="2" side="tl" part="a_verb"/>
            <lit-tag v="Inf"/>
            <clip pos="2" side="tl" part="lemq"/>
          </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: kaikki/buot nom">
      <pattern>
        <pattern-item n="buot"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <!-- TODO: nominal_case_number? -->
        <call-macro n="nominal_case_number1">
          <with-param pos="2"/>
        </call-macro>
        <!--    
		<call-macro n="nominal_case_number1">
          <with-param pos="1"/>
        </call-macro>
		-->
        <call-macro n="set_noun_postp">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_foc_particles">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_syntag1">
          <with-param pos="1"/>
        </call-macro>
        <choose>
          <!-- set attr case based on head case. Head Ill -> Attr Gen, head Loc -> Attr Gen -->
          <when>
            <test>
              <and>
                <equal>
                  <clip pos="2" side="tl" part="nbr"/>
                  <lit-tag v="Sg"/>
                </equal>
                <or>
                  <equal>
                    <clip pos="2" side="tl" part="a_case"/>
                    <lit-tag v="Ill"/>
                  </equal>
                  <equal>
                    <clip pos="2" side="tl" part="a_case"/>
                    <lit-tag v="Loc"/>
                  </equal>
                </or>
              </and>
            </test>
            <let>
              <clip pos="1" side="tl" part="a_case"/>
              <lit-tag v="Gen"/>
            </let>
          </when>
        </choose>
        <choose>
          <!-- no love yet. works on attr but not on noun -->
          <when>
            <test>
              <equal>
                <clip pos="2" side="tl" part="a_case"/>
                <lit-tag v="Ess"/>
              </equal>
            </test>
            <call-macro n="strip_nbr2">
              <with-param pos="1"/>
              <with-param pos="2"/>
            </call-macro>
          </when>
        </choose>
        <choose>
          <!-- we actually want pl here instead of the default Sg -->
          <when>
            <test>
              <equal>
                <clip pos="2" side="tl" part="a_case"/>
                <lit-tag v="Com"/>
              </equal>
            </test>
            <let>
              <var n="comitative_num"/>
              <lit-tag v="Pl"/>
            </let>
            <let>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="Pl"/>
            </let>
          </when>
        </choose>
        <!--
		<choose>
          <when>
            <test>
				<or>
				  <equal>
	                <clip pos="2" side="tl" part="nbr"/>
	                <lit-tag v="Pl"/>
	              </equal>
	              <equal>
	                <var n="comitative_num"/>
	                <lit-tag v="Pl"/>
	              </equal>
				</or>
            </test>
			<let>
				<var n="buot_buohkat" />
				<lit v="buohkat" />
			</let>
          </when>
		  <otherwise>
		    <let>
				<var n="buot_buohkat" />
				<lit v="buot" />
			</let>
		  </otherwise>
	  </choose>
	  -->
        <!-- it seems like buot/buohkat as attr is always reduced to some plain attributative form instead. leaving above for ref. -->
        <out>
          <chunk name="buot" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="current_syntag"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="a_case"/></tag>
            </tags>
            <lu>
              <lit v="buot"/>
              <lit-tag v="Pron"/>
              <lit-tag v="Indef"/>
              <!--
			  <var n="buot_buohkat"/>
              <lit-tag v="Pron"/>
              <lit-tag v="Indef"/>
			  <var n="comitative_num"/>
              <clip pos="2" side="tl" part="nbr"/> 
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="lemq"/>
			  -->
              <!-- Need to figure out what to do with buot/Sg here. -->
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="comitative_num"/>
              <clip pos="2" side="tl" part="a_case"/>
              <clip pos="2" side="tl" part="a_pxprs"/>
              <clip pos="2" side="tl" part="a_qst"/>
              <clip pos="2" side="tl" part="a_foc"/>
              <clip pos="1" side="tl" part="lemq"/>
              <var n="cur_noun_postp"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: kaikki/buot">
      <pattern>
        <pattern-item n="buot"/>
      </pattern>
      <action>
        <call-macro n="nominal_case_number1">
          <with-param pos="1"/>
        </call-macro>
        <choose>
          <when>
            <test>
              <or>
                <equal>
                  <clip pos="1" side="tl" part="nbr"/>
                  <lit-tag v="Pl"/>
                </equal>
                <equal>
                  <var n="comitative_num"/>
                  <lit-tag v="Pl"/>
                </equal>
              </or>
            </test>
            <let>
              <var n="buot_buohkat"/>
              <lit v="buohkat"/>
            </let>
          </when>
          <otherwise>
            <let>
              <var n="buot_buohkat"/>
              <lit v="buot"/>
            </let>
          </otherwise>
        </choose>
        <choose>
          <when>
            <!-- Ja jumala katsoi kaikkea, mitä hän tehnyt oli ... -->
            <!--  Ipmil geahčadii buot maid lei dahkan -->
            <test>
              <equal>
                <clip pos="1" side="tl" part="nbr"/>
                <lit-tag v="Sg"/>
              </equal>
            </test>
            <let>
              <clip pos="1" side="tl" part="a_case"/>
              <lit v=""/>
            </let>
            <let>
              <clip pos="1" side="tl" part="nbr"/>
              <lit v=""/>
            </let>
          </when>
        </choose>
        <out>
          <chunk name="buot" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="current_syntag"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="a_case"/></tag>
            </tags>
            <lu>
              <var n="buot_buohkat"/>
              <lit-tag v="Pron"/>
              <lit-tag v="Indef"/>
              <var n="comitative_num"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="lemq"/>
              <!-- Need to figure out what to do with buot/Sg here. -->
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <!-- begin pronoun rules -->
    <rule comment="regla: pron.indef">
      <!-- indefinite pronouns 'juohke' have no number/case in sámi -->
      <pattern>
        <pattern-item n="pronindef"/>
      </pattern>
      <action>
        <out>
          <chunk name="pron" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PRN.INDEF"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_pron"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: pron.pers">
      <pattern>
        <pattern-item n="pron_pers"/>
      </pattern>
      <action>
        <call-macro n="nominal_case_number1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="pron_pers" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PRN"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
              <tag><clip pos="1" side="tl" part="a_person"/></tag>
              <tag><clip pos="1" side="sl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_pron"/>
              <!-- <var n="comitative_num"/> -->
              <!-- <clip pos="1" side="tl" part="nbr"/> -->
              <clip pos="1" side="tl" part="a_person"/>
              <clip pos="1" side="tl" part="a_case"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: pron.refl">
      <pattern>
        <pattern-item n="pronrefl"/>
      </pattern>
      <action>
        <call-macro n="nominal_case_number1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="pron" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PRN.REFL"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_pron"/>
              <var n="comitative_num"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="a_pxprs"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: pron rel">
      <pattern>
        <pattern-item n="pron_rel"/>
      </pattern>
      <action>
        <call-macro n="nominal_case_number1">
          <with-param pos="1"/>
        </call-macro>
        <choose>
          <!-- siihen -> dasa  -->
          <when>
            <test>
              <and>
                <equal>
                  <clip pos="1" side="sl" part="nbr"/>
                  <lit-tag v="Sg"/>
                </equal>
                <contains-substring>
                  <clip pos="1" side="sl" part="a_pron"/>
                  <lit v="Dem"/>
                </contains-substring>
              </and>
            </test>
            <let>
              <clip pos="1" side="tl" part="nbr"/>
              <lit-tag v="Sg3"/>
            </let>
            <let>
              <clip pos="1" side="tl" part="a_pron"/>
              <lit-tag v="Pron.Pers"/>
            </let>
          </when>
	  </choose>
	  <!-- for some reason the number removal from before didn't work, so trying again. Probably didn't play well with the other macros? -->
	  <!-- Suurin osa kirkoista on rakennettu aikana, jona ei ollut vaihtoehtona olla kuulumatta uskontoporukoihin. -->
	  <choose>
        <!-- strip number when case is essive -->
        <when>
          <test>
            <equal>
              <clip pos="1" side="tl" part="a_case"/>
              <lit-tag v="Ess"/>
            </equal>
          </test>
          <call-macro n="strip_nbr">
            <with-param pos="1"/>
          </call-macro>
        </when>
      </choose>
        <out>
          <chunk name="pron_rel" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PRN"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
              <tag><clip pos="1" side="sl" part="nbr"/></tag>
              <tag><clip pos="1" side="sl" part="a_person"/></tag>
              <tag><clip pos="1" side="sl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_pron"/>
              <var n="comitative_num"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: pron dem">
      <!-- tässä -> dás ; tuossa -> duos -->
      <!-- as far as GT is concerned these are only demonstratives in certain cases. -->
      <!-- 
					Sg.				Pl.
			N:		pers/dem		pers/dem			(as dem it is Sg, Pl; not Sg3 Pl3,  no person, just number)
			A:		pers/dem		pers/dem
			G:		pers/dem		pers/dem
			I:		pers			pers/dem
			L:		pers			pers/dem
			C:		pers/dem		pers/dem
			E:		pers/dem		pers/dem (no num)
			
			Another rule handles the personal pronouns... So, the ones we have to be concerned with here are.
			
			The solution for now is hackey. We turn it into a personal pronoun so it generates, but ideally only demonstratives
			would end up in particular locations. Fix to this will probably come later... 
		
		-->
      <pattern>
        <pattern-item n="pron_dem"/>
      </pattern>
      <action>
        <call-macro n="nominal_case_number1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_foc_particles">
          <with-param pos="1"/>
        </call-macro>
        <choose>
          <when>
            <test>
              <or>
                <equal>
                  <clip pos="1" side="tl" part="a_case"/>
                  <lit-tag v="Ill"/>
                </equal>
                <equal>
                  <clip pos="1" side="tl" part="a_case"/>
                  <lit-tag v="Loc"/>
                </equal>
              </or>
            </test>
            <let>
              <clip pos="1" side="tl" part="a_pronattrs"/>
              <lit-tag v="Pers"/>
            </let>
            <let>
              <clip pos="1" side="tl" part="nbr"/>
              <lit-tag v="Sg3"/>
            </let>
          </when>
        </choose>
        <out>
          <chunk name="pron_dem" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PRN"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
              <tag><clip pos="1" side="sl" part="nbr"/></tag>
              <tag><clip pos="1" side="sl" part="a_person"/></tag>
              <tag><clip pos="1" side="sl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_pron"/>
              <var n="comitative_num"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_person"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="a_foc"/>
              <clip pos="1" side="tl" part="a_qst"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: pron">
      <pattern>
        <pattern-item n="pron"/>
      </pattern>
      <action>
        <call-macro n="nominal_case_number1">
          <with-param pos="1"/>
        </call-macro>
        <choose>
          <!-- siihen -> dasa  -->
          <when>
            <test>
              <and>
                <equal>
                  <clip pos="1" side="sl" part="nbr"/>
                  <lit-tag v="Sg"/>
                </equal>
                <equal>
                  <clip pos="1" side="sl" part="a_pronattrs"/>
                  <lit v="Dem"/>
                </equal>
              </and>
            </test>
            <let>
              <clip pos="1" side="tl" part="nbr"/>
              <lit-tag v="Sg3"/>
            </let>
            <let>
              <clip pos="1" side="tl" part="a_pron"/>
              <lit-tag v="Pron.Pers"/>
            </let>
          </when>
        </choose>
        <out>
          <chunk name="pron" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PRN"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
              <tag><clip pos="1" side="sl" part="nbr"/></tag>
              <tag><clip pos="1" side="sl" part="a_person"/></tag>
              <tag><clip pos="1" side="sl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_pron"/>
              <var n="comitative_num"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_person"/>
              <clip pos="1" side="tl" part="a_case"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <!-- end pronoun rules -->
    <!-- begin verb rules -->
    <rule comment="regla: inf1">
      <pattern>
        <pattern-item n="inf"/>
      </pattern>
      <action>
        <call-macro n="derive_verb_pass1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="inf1" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="Inf1"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_verb"/>
              <var n="cur_derivation"/>
              <lit-tag v="Inf"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <let>
          <var n="cur_derivation"/>
          <lit v=""/>
        </let>
      </action>
    </rule>

    <rule comment="regla: participles">
      <pattern>
        <pattern-item n="pcps"/>
      </pattern>
      <action>
        <call-macro n="derive_verb_pass1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="inf" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PCP"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_verb"/>
              <var n="cur_derivation"/>
              <clip pos="1" side="tl" part="a_realis"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <let>
          <var n="cur_derivation"/>
          <lit v=""/>
        </let>
      </action>
    </rule>

    <rule comment="regla: inf2: inf2+Ine → Ger, Inf2+Ins → VGen">
      <!-- Lapsi tuli itkien kotiin = mánná bođii čieru ruoktot -->
      <!-- Lapsi tuli itkien kotiin = mánná bođii čieru ruoktot -->
      <pattern>
        <pattern-item n="inf2"/>
      </pattern>
      <action>
        <choose>
          <when>
            <test>
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="Ine"/>
              </equal>
            </test>
            <let>
              <clip pos="1" side="tl" part="a_case"/>
              <lit-tag v="Com"/>
            </let>
          </when>
        </choose>
        <!-- Ine -> Ess -->
        <choose>
          <when>
            <test>
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="Ine"/>
              </equal>
            </test>
            <let>
              <clip pos="1" side="tl" part="a_realis"/>
              <lit-tag v="VGen"/>
            </let>
          </when>
        </choose>
        <out>
          <chunk name="inf" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="Inf2"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_verb"/>
              <!-- <clip pos="1" side="tl" part="a_trans" /> -->
              <!-- specified in a_verb -->
              <lit-tag v="Ger"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: infs. Fin Inf3 → sme Actio; case changes">
      <!-- ine -> ess, ela -> loc, ill -> 0 -->
      <!-- inf3 -> actio -->
      <!-- Test: Minä tulen katsomasta. ~ Mun boađán geahččamis. -->
      <!-- Test: Minä menen katsomaan. ~ Mun manan geahččat. -->
      <!-- Test: Minä olen katsomassa. ~ Mun lean geahččame. -->
      <!-- fuom/huom/obs: west: geahččame, east: geahččamin -->
      <pattern>
        <pattern-item n="inf3"/>
      </pattern>
      <action>
        <!-- ela -> loc. (set_loc_loc1 may do too much for our purposes, but it works for now) -->
        <call-macro n="set_ela_loc1">
          <with-param pos="1"/>
        </call-macro>
        <!-- Inf3 -> Actio -->
        <choose>
          <when>
            <test>
              <or>
                <equal>
                  <clip pos="1" side="sl" part="a_case"/>
                  <lit-tag v="Ela"/>
                </equal>
                <equal>
                  <clip pos="1" side="sl" part="a_case"/>
                  <lit-tag v="Ine"/>
                </equal>
              </or>
            </test>
            <let>
              <clip pos="1" side="tl" part="a_realis"/>
              <lit-tag v="Actio"/>
            </let>
          </when>
        </choose>
        <!-- Ine -> Ess -->
        <choose>
          <when>
            <test>
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="Ine"/>
              </equal>
            </test>
            <let>
              <clip pos="1" side="tl" part="a_case"/>
              <lit-tag v="Ess"/>
            </let>
          </when>
        </choose>
        <!-- Set Inf -->
        <choose>
          <when>
            <test>
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="Ill"/>
              </equal>
            </test>
            <let>
              <clip pos="1" side="tl" part="a_realis"/>
              <lit-tag v="Inf"/>
            </let>
            <let>
              <clip pos="1" side="tl" part="a_case"/>
              <lit v=""/>
            </let>
          </when>
        </choose>
        <!-- Ill -> 0 -->
        <choose>
          <when>
            <test>
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="Ill"/>
              </equal>
            </test>
            <let>
              <clip pos="1" side="tl" part="a_case"/>
              <lit v=""/>
            </let>
          </when>
        </choose>
        <choose>
          <!-- Ade -> Der_n Com -->
          <!-- Hän meni yliopistoon juoksemalla - Son manai universitehtii viehkamiin (?) -->
          <when>
            <test>
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="Ade"/>
              </equal>
            </test>
            <out>
              <chunk name="inf" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="Inf3"/></tag>
                  <tag><clip pos="1" side="sl" part="syntag"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_verb"/>
                  <lit-tag v="Der3.Der_n.N.Sg.Com"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <!-- Abe -> VAbess -->
          <when>
            <test>
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="Abe"/>
              </equal>
            </test>
            <out>
              <chunk name="inf" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="Inf3"/></tag>
                  <tag><clip pos="1" side="sl" part="syntag"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_verb"/>
                  <lit-tag v="VAbess"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise>
            <out>
              <chunk name="inf" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="Inf3"/></tag>
                  <tag><clip pos="1" side="sl" part="syntag"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_verb"/>
                  <!-- <clip pos="1" side="tl" part="a_trans" /> -->
                  <!-- specified in a_verb -->
                  <clip pos="1" side="tl" part="a_realis"/>
                  <clip pos="1" side="tl" part="a_case"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>
    <rule comment="regla: v_actor">
      <pattern>
        <pattern-item n="v_actor"/>
      </pattern>
      <action>
        <call-macro n="nominal_case_number1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <!-- this should be treated as any other noun -->
          <chunk name="nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="N"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_verb"/>
              <lit-tag v="Der2.Actor.N"/>
              <!-- <clip pos="1" side="tl" part="gen"/> -->
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="a_pxprs"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: neg verb">
      <pattern>
        <pattern-item n="neg_verb"/>
      </pattern>
      <action>
        <call-macro n="set_foc_particles">
          <with-param pos="1"/>
        </call-macro>
        <choose>
          <when>
            <test>
              <not>
                <equal>
                  <clip pos="1" side="tl" part="a_realis"/>
                  <lit-tag v="Imprt"/>
                </equal>
              </not>
            </test>
            <let>
              <var n="cur_verb_mood"/>
              <lit-tag v="Ind"/>
            </let>
          </when>
        </choose>
        <out>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="V.NEG"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_verb"/>
              <!-- <clip pos="1" side="tl" part="a_trans" /> -->
              <!-- specified in a_verb -->
              <clip pos="1" side="tl" part="a_realis"/>
              <clip pos="1" side="tl" part="a_voice"/>
              <var n="cur_verb_mood"/>
              <!--<clip pos="1" side="tl" part="a_tense" />-->
              <clip pos="1" side="tl" part="a_person"/>
              <clip pos="1" side="tl" part="a_neg"/>
              <clip pos="1" side="tl" part="a_foc"/>
              <clip pos="1" side="tl" part="a_qst"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <let>
          <var n="cur_verb_mood"/>
          <lit v=""/>
        </let>
      </action>
    </rule>

    <rule comment="regla: passive verb">
      <pattern>
        <pattern-item n="vpass"/>
      </pattern>
      <action>
        <call-macro n="derive_verb_pass1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_foc_particles">
          <with-param pos="1"/>
        </call-macro>
        <choose>
          <when>
            <test>
                <equal>
                  <clip pos="1" side="sl" part="a_person"/>
                  <lit-tag v="Pe4"/>
                </equal>
            </test>
            <let>
              <clip pos="1" side="tl" part="a_person"/>
              <lit-tag v="Sg3"/>
            </let>
          </when>
        </choose>
        <out>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="V"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_verb"/>
              <!-- <clip pos="1" side="tl" part="a_trans" /> -->
              <!-- specified in a_verb -->
              <var n="cur_derivation"/>
              <clip pos="1" side="tl" part="a_realis"/>
              <clip pos="1" side="tl" part="a_tense"/>
              <var n="cur_verb_tense"/>
              <clip pos="1" side="tl" part="a_person"/>
              <clip pos="1" side="tl" part="a_neg"/>
              <clip pos="1" side="tl" part="a_foc"/>
              <clip pos="1" side="tl" part="a_qst"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <let>
          <var n="cur_verb_mood"/>
          <lit v=""/>
        </let>
        <let>
          <var n="cur_verb_tense"/>
          <lit v=""/>
        </let>
        <let>
          <var n="cur_derivation"/>
          <lit v=""/>
        </let>
      </action>
    </rule>


    <rule comment="regla: verb">
      <pattern>
        <pattern-item n="verb"/>
      </pattern>
      <action>
        <call-macro n="set_syntag1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_foc_particles">
          <with-param pos="1"/>
        </call-macro>
        <choose>
          <when>
            <test>
                <equal caseless="yes">
                  <clip pos="1" side="sl" part="lem"/>
                  <lit v="täytyä"/>
                </equal>
            </test>
            <let>
              <clip pos="1" side="tl" part="a_person"/>
              <lit-tag v="PD"/>
            </let>
          </when>
        </choose>

        <choose>
          <when>
            <test>
              <or>
                <equal>
                  <clip pos="1" side="sl" part="a_realis"/>
                  <lit-tag v="Pot"/>
                </equal>
                <equal>
                  <clip pos="1" side="sl" part="a_realis"/>
                  <lit-tag v="Cond"/>
                </equal>
              </or>
            </test>
            <let>
              <var n="cur_verb_tense"/>
              <lit-tag v="Prs"/>
            </let>
          </when>
        </choose>
        <out>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="V"/></tag>
              <tag><var n="current_syntag"/></tag> 
              <tag><clip pos="1" side="tl" part="a_person"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_verb"/>
              <!-- <clip pos="1" side="tl" part="a_trans" /> -->
              <!-- specified in a_verb -->
              <clip pos="1" side="tl" part="a_realis"/>
              <clip pos="1" side="tl" part="a_voice"/>
              <clip pos="1" side="tl" part="a_tense"/>
              <var n="cur_verb_tense"/>
              <lit-tag v="3"/>
              <clip pos="1" side="tl" part="a_neg"/>
              <clip pos="1" side="tl" part="a_foc"/>
              <clip pos="1" side="tl" part="a_qst"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <let>
          <var n="cur_verb_mood"/>
          <lit v=""/>
        </let>
        <let>
          <var n="cur_verb_tense"/>
          <lit v=""/>
        </let>
      </action>
    </rule>
    <!-- NOTE: Not doing aux verb for now, save these for interchunk -->
    <!-- end verb rules -->
    <!-- begin noun rules -->
    <!-- Need to move the multi-word rules up a level -->
    <rule comment="regla: appearance adverbials: adj adv">
      <!-- uskonnollinen hengiltään -> vuoiŋŋa mielde works with adj, not with non 3pPx. -->
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="appearance"/>
      </pattern>
      <action>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="current_syntag"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <!-- <clip pos="1" side="tl" part="gen"/> -->
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="a_pxprs"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <lit-tag v="N"/>
              <lit-tag v="Sg"/>
              <lit-tag v="Gen"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b/>
            <lu>
              <lit v="mielde"/>
              <lit-tag v="Po"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: appearance adverbials: adv">
      <!-- hengiltään -> vuoiŋŋa mielde. -->
      <pattern>
        <pattern-item n="appearance"/>
      </pattern>
      <action>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="current_syntag"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <lit-tag v="N"/>
              <lit-tag v="Sg"/>
              <lit-tag v="Gen"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b/>
            <lu>
              <lit v="mielde"/>
              <lit-tag v="Po"/>
              <!--<clip pos="1" side="tl" part="lemq"/>-->
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: nom">
      <pattern>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_noun_postp">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="nominal_case_number1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_foc_particles">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="current_syntag"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <var n="comitative_num"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="a_pxprs"/>
              <clip pos="1" side="tl" part="a_foc"/>
              <clip pos="1" side="tl" part="a_qst"/>
              <clip pos="1" side="tl" part="lemq"/>
              <var n="cur_noun_postp"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: attrnom_3 nom">
      <pattern>
        <pattern-item n="attrnom_3"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <!-- TODO: nominal_case_number? -->
        <call-macro n="nominal_case_number1">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_noun_postp">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_foc_particles">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_syntag1">
          <with-param pos="1"/>
        </call-macro>
        <choose>
          <!-- set attr case based on head case. Head Ill -> Attr Gen, head Loc -> Attr Gen -->
          <when>
            <test>
              <or>
                <equal>
                  <clip pos="2" side="tl" part="a_case"/>
                  <lit-tag v="Ill"/>
                </equal>
                <equal>
                  <clip pos="2" side="tl" part="a_case"/>
                  <lit-tag v="Loc"/>
                </equal>
              </or>
            </test>
            <let>
              <clip pos="1" side="tl" part="a_case"/>
              <lit-tag v="Gen"/>
            </let>
          </when>
        </choose>
        <choose>
          <!-- no love yet. works on attr but not on noun -->
          <when>
            <test>
              <equal>
                <clip pos="2" side="tl" part="a_case"/>
                <lit-tag v="Ess"/>
              </equal>
            </test>
            <call-macro n="strip_nbr2">
              <with-param pos="1"/>
              <with-param pos="2"/>
            </call-macro>
          </when>
        </choose>
        <out>
          <!-- Temporarily labeling these with numbers for easier debugging -->
          <chunk name="attrnom_3" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="current_syntag"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="a_pxprs"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="a_case"/>
              <clip pos="2" side="tl" part="a_pxprs"/>
              <clip pos="2" side="tl" part="a_qst"/>
              <clip pos="2" side="tl" part="a_foc"/>
              <clip pos="2" side="tl" part="lemq"/>
              <var n="cur_noun_postp"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: attrnom_2 nom">
      <pattern>
        <pattern-item n="attrnom_2"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_noun_postp">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="nominal_case_number2">
          <with-param pos="2"/>
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_foc_particles">
          <with-param pos="2"/>
        </call-macro>
        <choose>
          <!-- This and following choose rule mikä talo -> mii dáluid -->
          <when>
            <test>
              <and>
                <equal>
                  <clip pos="1" side="sl" part="a_case"/>
                  <lit-tag v="Nom"/>
                </equal>
                <equal>
                  <clip pos="2" side="sl" part="a_case"/>
                  <lit-tag v="Nom"/>
                </equal>
              </and>
            </test>
            <let>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="Pl"/>
            </let>
          </when>
        </choose>
        <choose>
          <when>
            <test>
              <and>
                <equal>
                  <clip pos="1" side="sl" part="a_case"/>
                  <lit-tag v="Nom"/>
                </equal>
                <equal>
                  <clip pos="2" side="sl" part="a_case"/>
                  <lit-tag v="Nom"/>
                </equal>
              </and>
            </test>
            <let>
              <clip pos="2" side="tl" part="a_case"/>
              <lit-tag v="Gen"/>
            </let>
          </when>
        </choose>
        <choose>
          <!-- set attr case based on head case. Head Ill -> Attr Gen, head Loc -> Attr Gen -->
          <when>
            <test>
              <or>
                <equal>
                  <clip pos="2" side="tl" part="a_case"/>
                  <lit-tag v="Ill"/>
                </equal>
                <equal>
                  <clip pos="2" side="tl" part="a_case"/>
                  <lit-tag v="Loc"/>
                </equal>
              </or>
            </test>
            <let>
              <clip pos="1" side="tl" part="a_case"/>
              <lit-tag v="Gen"/>
            </let>
          </when>
        </choose>
        <choose>
          <!-- no love yet. works on attr but not on noun -->
          <when>
            <test>
              <equal>
                <clip pos="2" side="tl" part="a_case"/>
                <lit-tag v="Ess"/>
              </equal>
            </test>
            <call-macro n="strip_nbr2">
              <with-param pos="1"/>
              <with-param pos="2"/>
            </call-macro>
          </when>
        </choose>
        <out>
          <chunk name="attrnom_2" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="current_syntag"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_attr"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="a_pxprs"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="a_case"/>
              <clip pos="2" side="tl" part="a_pxprs"/>
              <clip pos="2" side="tl" part="a_qst"/>
              <clip pos="2" side="tl" part="a_foc"/>
              <clip pos="2" side="tl" part="lemq"/>
              <var n="cur_noun_postp"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: attrnom_1 nom">
      <!-- näihin taloihin -> dáid dáluide. TODO:  tänä talona -> dánin #dállu . write wiki tests-->
      <pattern>
        <pattern-item n="attrnom_1"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_noun_postp">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="nominal_case_number1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="nominal_case_number1">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_comitative_number">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_foc_particles">
          <with-param pos="2"/>
        </call-macro>
        <choose>
          <!-- set attr case based on head case. Head Ill -> Attr Gen, head Loc -> Attr Gen -->
          <when>
            <test>
              <and>
                <equal>
                  <clip pos="2" side="tl" part="nbr"/>
                  <lit-tag v="Sg"/>
                </equal>
                <or>
                  <equal>
                    <clip pos="2" side="tl" part="a_case"/>
                    <lit-tag v="Ill"/>
                  </equal>
                  <equal>
                    <clip pos="2" side="tl" part="a_case"/>
                    <lit-tag v="Loc"/>
                  </equal>
                </or>
              </and>
            </test>
            <let>
              <clip pos="1" side="tl" part="a_case"/>
              <lit-tag v="Gen"/>
            </let>
          </when>
        </choose>
        <choose>
          <!-- no love yet. works on attr but not on noun -->
          <when>
            <test>
              <equal>
                <clip pos="2" side="tl" part="a_case"/>
                <lit-tag v="Ess"/>
              </equal>
            </test>
            <call-macro n="strip_nbr2">
              <with-param pos="1"/>
              <with-param pos="2"/>
            </call-macro>
          </when>
        </choose>
        <choose>
          <when>
            <test>
              <equal>
                <clip pos="2" side="tl" part="nbr"/>
                <lit-tag v="Pl"/>
              </equal>
            </test>
            <let>
              <clip pos="1" side="tl" part="nbr"/>
              <lit-tag v="Pl"/>
            </let>
          </when>
        </choose>
        <out>
          <chunk name="attrnom_1" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="current_syntag"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_attr"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="a_pxprs"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <var n="comitative_num"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="a_case"/>
              <clip pos="2" side="tl" part="a_pxprs"/>
              <clip pos="2" side="tl" part="a_qst"/>
              <clip pos="2" side="tl" part="a_foc"/>
              <clip pos="2" side="tl" part="lemq"/>
              <var n="cur_noun_postp"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: oma nom">
      <pattern>
        <pattern-item n="oma_attr"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_noun_postp">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="nominal_case_number2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_foc_particles">
          <with-param pos="2"/>
        </call-macro>
        <let>
          <var n="cur_poss_suff"/>
          <lit v=""/>
        </let>
        <choose>
          <when>
            <test>
              <not>
                <equal>
                  <clip pos="2" side="sl" part="a_pxprs"/>
                  <lit v=""/>
                </equal>
              </not>
            </test>
            <let>
              <var n="cur_poss_suff"/>
              <clip pos="2" side="tl" part="a_pxprs"/>
            </let>
          </when>
        </choose>
        <choose>
          <when>
            <test>
              <equal>
                <clip pos="2" side="sl" part="a_case"/>
                <lit-tag v="Ins"/>
              </equal>
            </test>
            <let>
              <clip pos="2" side="tl" part="a_case"/>
              <lit-tag v="Com"/>
            </let>
          </when>
          <when>
            <test>
              <equal>
                <clip pos="1" side="sl" part="a_case"/>
                <lit-tag v="Tra"/>
              </equal>
            </test>
            <let>
              <clip pos="1" side="tl" part="a_case"/>
              <lit-tag v="Gen"/>
            </let>
          </when>
        </choose>
        <out>
          <chunk name="oma_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="current_syntag"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <lit-tag v="Pron"/>
              <lit-tag v="Refl"/>
              <clip pos="1" side="tl" part="a_person"/>
              <clip pos="1" side="tl" part="a_case"/>
              <var n="cur_poss_suff"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <var n="comitative_num"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="a_case"/>
              <clip pos="2" side="tl" part="a_qst"/>
              <clip pos="2" side="tl" part="a_foc"/>
              <clip pos="2" side="tl" part="lemq"/>
              <var n="cur_noun_postp"/>
            </lu>
          </chunk>
        </out>
        <let>
          <var n="cur_poss_suff"/>
          <lit v=""/>
        </let>
      </action>
    </rule>
    <rule comment="regla: attrgen attradj nom">
      <pattern>
        <pattern-item n="attrgen"/>
        <pattern-item n="attr"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_noun_postp">
          <with-param pos="3"/>
        </call-macro>
        <call-macro n="nominal_case_number1">
          <with-param pos="3"/>
        </call-macro>
        <call-macro n="set_foc_particles">
          <with-param pos="3"/>
        </call-macro>
        <choose>
          <when>
            <test>
              <in caseless="yes">
                <clip pos="1" side="sl" part="lemh"/>
                <list n="sort_pronouns"/>
              </in>
            </test>
            <let>
              <var n="demonstrative"/>
              <lit-tag v="Dem"/>
            </let>
          </when>
          <otherwise>
            <let>
              <var n="demonstrative"/>
              <lit v=""/>
            </let>
          </otherwise>
        </choose>
        <out>
          <chunk name="gen_adj_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="current_syntag"/></tag>
              <tag><clip pos="3" side="tl" part="nbr"/></tag>
              <tag><clip pos="3" side="tl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="gen_attrs"/>
              <clip pos="1" side="tl" part="a_person"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_attrs"/>
              <var n="demonstrative"/>
              <lit-tag v="Attr"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <var n="comitative_num"/>
              <clip pos="3" side="tl" part="nbr"/>
              <clip pos="3" side="tl" part="a_case"/>
              <clip pos="3" side="tl" part="a_pxprs"/>
              <clip pos="3" side="tl" part="a_qst"/>
              <clip pos="3" side="tl" part="a_foc"/>
              <clip pos="3" side="tl" part="lemq"/>
              <var n="cur_noun_postp"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: attradj attradj nom">
      <pattern>
        <pattern-item n="attr"/>
        <pattern-item n="attr"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_noun_postp">
          <with-param pos="3"/>
        </call-macro>
        <call-macro n="nominal_case_number1">
          <with-param pos="3"/>
        </call-macro>
        <call-macro n="set_foc_particles">
          <with-param pos="3"/>
        </call-macro>
        <choose>
          <when>
            <test>
              <in caseless="yes">
                <clip pos="1" side="sl" part="lemh"/>
                <list n="sort_pronouns"/>
              </in>
            </test>
            <let>
              <var n="demonstrative"/>
              <lit-tag v="Dem"/>
            </let>
          </when>
          <otherwise>
            <let>
              <var n="demonstrative"/>
              <lit v=""/>
            </let>
          </otherwise>
        </choose>
        <out>
          <chunk name="adj_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="current_syntag"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_attrs"/>
              <var n="demonstrative"/>
              <lit-tag v="Attr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_attrs"/>
              <var n="demonstrative"/>
              <lit-tag v="Attr"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <var n="comitative_num"/>
              <clip pos="3" side="tl" part="nbr"/>
              <clip pos="3" side="tl" part="a_case"/>
              <clip pos="3" side="tl" part="a_pxprs"/>
              <clip pos="3" side="tl" part="a_qst"/>
              <clip pos="3" side="tl" part="a_foc"/>
              <clip pos="3" side="tl" part="lemq"/>
              <var n="cur_noun_postp"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: attradj nom">
      <pattern>
        <pattern-item n="attr"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_noun_postp">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="nominal_case_number1">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_foc_particles">
          <with-param pos="2"/>
        </call-macro>
        <choose>
          <when>
            <test>
              <in caseless="yes">
                <clip pos="1" side="sl" part="lemh"/>
                <list n="sort_pronouns"/>
              </in>
            </test>
            <let>
              <var n="demonstrative"/>
              <lit-tag v="Dem"/>
            </let>
          </when>
          <otherwise>
            <let>
              <var n="demonstrative"/>
              <lit v=""/>
            </let>
          </otherwise>
        </choose>
        <out>
          <chunk name="adj_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="current_syntag"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_attrs"/>
              <var n="demonstrative"/>
              <lit-tag v="Attr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <var n="comitative_num"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="a_case"/>
              <clip pos="2" side="tl" part="a_pxprs"/>
              <clip pos="2" side="tl" part="a_qst"/>
              <clip pos="2" side="tl" part="a_foc"/>
              <clip pos="2" side="tl" part="lemq"/>
              <var n="cur_noun_postp"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: attrgen attrgen nom">
      <pattern>
        <pattern-item n="attrgen"/>
        <pattern-item n="attrgen"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_noun_postp">
          <with-param pos="3"/>
        </call-macro>
        <call-macro n="nominal_case_number1">
          <with-param pos="3"/>
        </call-macro>
        <call-macro n="set_foc_particles">
          <with-param pos="3"/>
        </call-macro>
        <out>
          <chunk name="gen_gen_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="current_syntag"/></tag>
              <tag><clip pos="3" side="tl" part="nbr"/></tag>
              <tag><clip pos="3" side="tl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="gen_attrs"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_person"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="gen_attrs"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="a_person"/>
              <clip pos="2" side="tl" part="a_case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <var n="comitative_num"/>
              <clip pos="3" side="tl" part="nbr"/>
              <clip pos="3" side="tl" part="a_case"/>
              <clip pos="3" side="tl" part="a_pxprs"/>
              <clip pos="3" side="tl" part="a_qst"/>
              <clip pos="3" side="tl" part="a_foc"/>
              <clip pos="3" side="tl" part="lemq"/>
              <var n="cur_noun_postp"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="regla: attrgen nom">
      <pattern>
        <pattern-item n="attrgen"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_noun_postp">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="nominal_case_number1">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_foc_particles">
          <with-param pos="2"/>
        </call-macro>
        <out>
          <chunk name="gen_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="current_syntag"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="gen_attrs"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_person"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <var n="comitative_num"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="a_case"/>
              <clip pos="2" side="tl" part="a_pxprs"/>
              <clip pos="2" side="tl" part="a_qst"/>
              <clip pos="2" side="tl" part="a_foc"/>
              <clip pos="2" side="tl" part="lemq"/>
              <var n="cur_noun_postp"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: NUM NomMod">
      <!-- Áhčis leat 2 máná. WORKS-->
      <pattern>
        <pattern-item n="num"/>
        <pattern-item n="num_mod"/>
      </pattern>
      <action>
        <call-macro n="set_noun_postp">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_loc_loc1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_all_ill1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_tra_ill1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_par_gen2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <out>
          <chunk name="num_mod" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="a_case"/>
              <clip pos="2" side="tl" part="a_pxprs"/>
              <var n="cur_noun_postp"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <!-- end noun rules -->
    <!-- begin adjective rules -->
    <rule comment="regla: oma">
      <pattern>
        <pattern-item n="adj_oma"/>
      </pattern>
      <action>
        <call-macro n="nominal_case_number1">
          <with-param pos="1"/>
        </call-macro>
		<!-- need to reset the variable here too. -->
		<let>
			<var n="default_px"/>
			<lit v=""/>
		</let>
		<choose><when>
				<test>
					<and>
						<not><equal>
						<clip pos="1" side="sl" part="a_pxprs"/>
						<lit v=""/>
						</equal></not>

						<not><equal>
						<clip pos="1" side="sl" part="a_case"/>
						<lit-tag v="Nom"/>

						</equal></not>
					</and>
					
					</test>
			<let>
              <clip pos="1" side="tl" part="nbr"/>
	  		  <lit v=""/>
		  </let>

		</when>
		<otherwise>
			<let>
				<var n="default_px"/>
					<lit-tag v="PxSg3"/>
				</let>
			<let>
              <clip pos="1" side="tl" part="nbr"/>
	  		  <lit v=""/>
		  </let>
		</otherwise>
	</choose>
	<choose>
		<when>
			<test><equal>
					<clip pos="1" side="tl" part="a_case"/>
					<lit-tag v="Nom"/>
			</equal></test>
		<let>
			<clip pos="1" side="tl" part="a_pxprs"/>
			<lit v=""/>
		</let>
		<let>
			<var n="default_px"/>
			<lit v=""/>
		</let>
		<let>
			<var n="comitative_num"/>
			<clip pos="1" side="sl" part="nbr"/>
		</let>
		</when>
	</choose>
        <out>
          <chunk name="adj_oma" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="Pron"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
              <tag><clip pos="1" side="sl" part="nbr"/></tag>
              <tag><clip pos="1" side="sl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
			  <lit-tag v="Pron" />
			  <lit-tag v="Refl" />
			  <!-- <clip pos="1" side="tl" part="gen"/> -->
              <clip pos="1" side="tl" part="nbr"/>
              <var n="comitative_num"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="a_pxprs"/>
				<var n="default_px"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
		<let>
			<var n="default_px"/>
			<lit v=""/>
		</let>
      </action>
    </rule>
    <rule comment="regla: adj">
      <pattern>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <call-macro n="nominal_case_number1">
          <with-param pos="1"/>
        </call-macro>
        <!-- <choose>
			<when>
				<test>
					<equal>
						<clip pos="1" side="tl" part="a_adj"/>
						<lit-tag v="A.Agr"/>
					</equal>
				</test>
				<let>
					<clip pos="1" side="tl" part="a_adj"/>
					<lit-tag v="A"/>
				</let>
			</when>
		</choose> -->
        <out>
          <chunk name="adj" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="A"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
              <tag><clip pos="1" side="sl" part="nbr"/></tag>
              <tag><clip pos="1" side="sl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <!-- <clip pos="1" side="tl" part="gen"/> -->
              <var n="comitative_num"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="a_pxprs"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <!-- end adjective rules -->
    <!-- begin unsorted rules -->
    <rule comment="REGLA: ORDINAL NOM">
      <pattern>
        <pattern-item n="ord"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="nominal_case_number2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_foc_particles">
          <with-param pos="2"/>
        </call-macro>
        <choose>
          <!-- Strip number on attr if essive -->
          <when>
            <test>
              <equal>
                <clip pos="1" side="tl" part="a_case"/>
                <lit-tag v="Ess"/>
              </equal>
            </test>
            <call-macro n="strip_nbr">
              <with-param pos="1"/>
            </call-macro>
          </when>
        </choose>
        <choose>
          <!-- Strip number on head if essive. TODO: doesn't work! -->
          <when>
            <test>
              <equal>
                <clip pos="2" side="tl" part="a_case"/>
                <lit-tag v="Ess"/>
              </equal>
            </test>
            <call-macro n="strip_nbr">
              <with-param pos="2"/>
            </call-macro>
          </when>
        </choose>
        <choose>
          <!-- if noun case is loc or ill, then attr is acc/gen -->
          <when>
            <test>
              <or>
                <equal>
                  <clip pos="2" side="tl" part="a_case"/>
                  <lit-tag v="Loc"/>
                </equal>
                <equal>
                  <clip pos="2" side="tl" part="a_case"/>
                  <lit-tag v="Ill"/>
                </equal>
              </or>
            </test>
            <let>
              <clip pos="1" side="tl" part="a_case"/>
              <lit-tag v="Gen"/>
            </let>
          </when>
        </choose>
        <out>
          <chunk name="ord_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="NUM"/></tag>
              <tag><clip pos="2" side="sl" part="syntag"/></tag>
              <tag><clip pos="2" side="sl" part="nbr"/></tag>
              <tag><clip pos="2" side="sl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_ord"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <!--<clip pos="1" side="tl" part="a_pxprs"/>-->
              <!-- fin numerals have this, sme ones don't -->
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <!-- space -->
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="a_case"/>
              <clip pos="2" side="tl" part="a_qst"/>
              <clip pos="2" side="tl" part="a_foc"/>
              <!--<clip pos="1" side="tl" part="a_pxprs"/>-->
              <!-- fin numerals have this, sme ones don't -->
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: NUMERAL NOM">
      <pattern>
        <pattern-item n="num"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_loc_loc1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_all_ill1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_tra_ill1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_par_gen1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="set_foc_particles">
          <with-param pos="2"/>
        </call-macro>
        <choose>
          <!-- Strip number on attr if essive -->
          <when>
            <test>
              <equal>
                <clip pos="1" side="tl" part="a_case"/>
                <lit-tag v="Ess"/>
              </equal>
            </test>
            <call-macro n="strip_nbr">
              <with-param pos="1"/>
            </call-macro>
          </when>
        </choose>
        <choose>
          <!-- Strip number on head if essive. TODO: doesn't work! -->
          <when>
            <test>
              <equal>
                <clip pos="2" side="tl" part="a_case"/>
                <lit-tag v="Ess"/>
              </equal>
            </test>
            <call-macro n="strip_nbr">
              <with-param pos="1"/>
            </call-macro>
          </when>
        </choose>
        <choose>
          <!-- if noun case is loc or ill, then attr is acc/gen -->
          <when>
            <test>
              <or>
                <equal>
                  <clip pos="2" side="tl" part="a_case"/>
                  <lit-tag v="Loc"/>
                </equal>
                <equal>
                  <clip pos="2" side="tl" part="a_case"/>
                  <lit-tag v="Ill"/>
                </equal>
              </or>
            </test>
            <let>
              <clip pos="1" side="tl" part="a_case"/>
              <lit-tag v="Gen"/>
            </let>
          </when>
        </choose>
        <out>
          <chunk name="num_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="NUM"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
              <tag><clip pos="1" side="sl" part="nbr"/></tag>
              <tag><clip pos="1" side="sl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <!--<clip pos="1" side="tl" part="a_pxprs"/>-->
              <!-- fin numerals have this, sme ones don't -->
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <!-- space -->
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="a_case"/>
              <clip pos="2" side="tl" part="a_qst"/>
              <clip pos="2" side="tl" part="a_foc"/>
              <!--<clip pos="1" side="tl" part="a_pxprs"/>-->
              <!-- fin numerals have this, sme ones don't -->
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: NUMERAL/ORDINAL">
      <pattern>
        <pattern-item n="nums"/>
      </pattern>
      <action>
        <call-macro n="nominal_case_number1">
          <!-- to convert par/ade etc. -->
          <with-param pos="1"/>
        </call-macro>
        <choose>
          <when>
            <test>
              <equal>
                <clip pos="1" side="tl" part="a_case"/>
                <lit-tag v="Ess"/>
              </equal>
            </test>
            <call-macro n="strip_nbr">
              <with-param pos="1"/>
            </call-macro>
          </when>
        </choose>
        <out>
          <chunk name="nums" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="NUM"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
              <tag><clip pos="1" side="sl" part="nbr"/></tag>
              <tag><clip pos="1" side="sl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <!--<clip pos="1" side="tl" part="a_pxprs"/>-->
              <!-- fin numerals have this, sme ones don't -->
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: ORD">
      <pattern>
        <pattern-item n="ord"/>
      </pattern>
      <action>
        <call-macro n="set_par_gen1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="ord" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="A.ORD"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
              <tag><clip pos="1" side="sl" part="nbr"/></tag>
              <tag><clip pos="1" side="sl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_ord"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: CONJUNCTION">
      <pattern>
        <pattern-item n="conj"/>
      </pattern>
      <action>
        <out>
          <chunk name="conj" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="CONJ"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_conj"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: ADVERB">
      <!-- This also handles cases where sl:Adv and tl:Po, and although this results in a Po tag, the chunk should still be Adv. -->
      <pattern>
        <pattern-item n="adv"/>
      </pattern>
      <action>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adv"/>
              <!--<clip pos="1" side="tl" part="a_pxprs"/>--> <!-- we discard pos.suf for now -->
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <!-- There currently shouldn't be many finnish adpositions that don't have a po or pr reading, but I want adpositions not to transfer yet so that something breaks and I notice. -->
    <rule comment="REGLA: POSTPOSITIONS">
      <pattern>
        <pattern-item n="postpos"/>
      </pattern>
      <action>
        <out>
          <chunk name="Po" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PO"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adp"/>
              <!--<clip pos="1" side="tl" part="a_pxprs"/>-->
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: PREPOSITIONS">
      <pattern>
        <pattern-item n="prepos"/>
      </pattern>
      <action>
        <!-- Prepositions need to be transfered to postpositions -->
        <out>
          <chunk name="pr" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PR"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adp"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: PARTICLE">
      <pattern>
        <pattern-item n="pcle"/>
      </pattern>
      <action>
        <choose>
          <!-- Sometimes Pcle can be translated by Adv, this allows that -->
          <when>
            <test>
              <equal>
                <clip pos="1" side="tl" part="a_adv"/>
                <lit-tag v="Adv"/>
              </equal>
            </test>
            <out>
              <chunk name="adv" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="ADV"/></tag>
                  <tag><clip pos="1" side="sl" part="syntag"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adv"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise>
            <out>
              <chunk name="pcle" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="PCLE"/></tag>
                  <tag><clip pos="1" side="sl" part="syntag"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_pcle"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>
    <rule comment="REGLA: PUNCTUATION CLB">
      <pattern>
        <pattern-item n="punct_clb"/>
      </pattern>
      <action>
        <out>
          <chunk name="punct" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="CLB"/></tag>
              <tag><clip pos="1" side="sl" part="syntag"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <!-- end unsorted rules -->
  </section-rules>
</transfer>
